{"version":3,"sources":["paginator.js"],"names":[],"mappingsfile":"jquery-paginator.js","sourcesContent":["(function () {\n    var Page = function Page($paginator, pageNumber) {\n        var $page = $('<div>'),\n            $content = $('<div>'),\n            $margin = $('<div>');\n\n        $margin.addClass('margin');\n\n        pageNumber = pageNumber || $paginator.data('lastPageNumber');\n\n        $content\n            .addClass('content')\n            .append($margin);\n\n        function conditionallyAppendHeader() {\n            var $headers = $paginator.find('.model').find('.header'),\n                $header,\n                $margin,\n                headerIndex,\n                headerCount = $headers.length;\n\n            if (headerCount < 1) {\n                return;\n            }\n\n            headerIndex = pageNumber % headerCount;\n            $header = $headers.eq(headerIndex).clone(true, true);\n\n            if ($header.hasClass('terminal') && pageNumber > 0) {\n                return;\n            }\n\n            $margin = $('<div>');\n            $margin.addClass('margin');\n            $header.children().each(function () {\n                $margin.append(this);\n            });\n            $header.append($margin);\n            $page.prepend($header);\n            setTimeout(function () {\n                $content.css('margin-top', $header.height());\n            });\n        }\n\n        function conditionallyAppendFooter() {\n            var $footers = $paginator.find('.model').find('.footer'),\n                $footer,\n                footerIndex,\n                footerCount = $footers.length,\n                $margin;\n\n            if (footerCount < 1) {\n                return;\n            }\n\n            footerIndex = pageNumber % footerCount;\n            $footer = $footers.eq(footerIndex).clone(true, true);\n\n            if ($footer.hasClass('terminal') && pageNumber < $paginator.data('lastPageNumber') - 1) {\n                return;\n            }\n\n            $margin = $('<div>');\n            $margin.addClass('margin');\n            $footer.children().each(function () {\n                $margin.append(this);\n            });\n\n            $footer\n                .append($margin);\n\n            $page\n                .append($footer);\n\n            setTimeout(function () {\n                $content.css('margin-bottom', $footer.height());\n            });\n        }\n\n        $page.getContentHeight = function getContentHeight() {\n            var $header = this.find('.header'),\n                $footer = this.find('.footer'),\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top'))),\n                bottomHeight = Math.max($footer.length > 0 ? $footer.height() : 0, parseInt($margin.css('margin-top')));\n\n            return this.height() - topHeight - bottomHeight;\n        };\n\n        $page.needsBreaking = function needsBreaking() {\n            return $content.height() > this.getContentHeight();\n        };\n\n        $page.setPageNumber = function setPageNumber(pageNumber) {\n            this.data('pageNumber', pageNumber);\n\n            this.find('.header').remove();\n            this.find('.footer').remove();\n\n            conditionallyAppendHeader();\n            conditionallyAppendFooter();\n        };\n\n        $page\n            .addClass('page')\n            .append($content);\n\n        $page.setPageNumber(pageNumber);\n\n        return $page;\n    };\n\n    $.fn.paginate = function Paginator() {\n        var $paginator = this,\n            $model = $('<div>'),\n            $modelWatch = $('<div>'),\n            $view = $('<div>'),\n            modelObserver = new MutationObserver(onWatchChange),\n            lastPageNumber = 0,\n            $pages = [],\n            pageBlockClass = 'page-block',\n            pageAddedClass = 'page-added',\n            pageDeletedClass = 'page-deleted',\n            $modelParents = [],\n            debounce = 500,\n            debounceTimer = null,\n            isEventTriggered = false;\n\n        function toClassSelector(classString) {\n            return '.' + classString.split(' ').filter(function (string) { return string.trim().length > 0 }).join('.');\n        }\n\n        function layoutContent() {\n            $model\n                .find(toClassSelector(pageBlockClass))\n                .each(function () {\n                    var $content = $(this),\n                        $modelParent = $content.parent();\n\n                    if ($content.parents(toClassSelector(pageDeletedClass)).length > 0) {\n                        return;\n                    }\n\n                    $modelParent.attr('data-order', 0);\n                    $content\n                        .data('$modelParent', $modelParent)\n                        .removeClass(pageBlockClass)\n                        .addClass(pageAddedClass);\n                    $modelParents.push($modelParent);\n                    $pages[0].find('.content').find('.margin').append($content);\n                });\n\n            $model\n                .find('[data-order]')\n                .each(function (i) {\n                    $(this).attr('data-order', i);\n                });\n\n            $view\n                .find('.content')\n                .find('.margin')\n                .children()\n                .each(function () {\n                    var $content = $(this),\n                        $modelParent = $content.data('$modelParent');\n\n                    if (!$modelParent) {\n                        $content.remove();\n                        return;\n                    }\n\n                    if (!($modelParent.hasClass(pageDeletedClass) ||\n                        $modelParent.parents().length < 1 ||\n                        $modelParent.parents(toClassSelector(pageDeletedClass)).length > 0)) {\n                        //if ($content.css('float') === 'none') {\n                            $content.attr('data-order', $modelParent.attr('data-order'));\n                        //}\n                        return;\n                    }\n\n                    $content.remove();\n                });\n        }\n\n        function orderContent() {\n            var $children = $view.find('.content').find('.margin').children();\n\n            $children\n                .each(function () {\n                    var $content = $(this),\n                        $prev = $content.prev(),\n                        $modelParent,\n                        $prevParent;\n\n                    $modelParent = $content.data('$modelParent');\n\n                    if ($prev.length > 0) {\n                        $prevParent = $prev.data('$modelParent');\n                    }\n\n                    if (!$prevParent) {\n                        return;\n                    }\n                    \n                    if (parseInt($modelParent.attr('data-order')) < parseInt($prevParent.attr('data-order'))) {\n                        $content.insertBefore($prev);\n                    }\n                });\n        }\n\n        function analyzePageBreaks() {\n            var pagesWithBreaks;\n\n            function getPagesWithBreaks() {\n                var pagesWithBreaks = [];\n\n                $pages.forEach(function ($page, i) {\n                    var contentHeight = $page.getContentHeight(),\n                        pageHasBreaks = false,\n                        $contents = $page.find('.content').find('.margin').children();\n\n                    $contents.each(function () {\n                        var $this = $(this),\n                            position = $this.position().top,\n                            height = $this.height(),\n                            pageContentLowerBoundary = parseInt($page.find('.content').css('margin-top')) + contentHeight;\n\n                        pageHasBreaks = pageHasBreaks || position + height > pageContentLowerBoundary;\n                    });\n\n                    if (!pageHasBreaks) {\n                        $page.removeClass('-overflow');\n                        return;\n                    }\n\n                    $page.addClass('-overflow');\n                    pagesWithBreaks.push(i);\n                });\n\n                return pagesWithBreaks;\n            }\n\n            function splitContent(pageNumbers) {\n                pageNumbers.forEach(function (pageNumber, i) {\n                    var toNextPage = [],\n                        $page = $pages[pageNumber],\n                        contentHeight = $page.getContentHeight(),\n                        hasPageBreak = false;\n\n                    $page.find('.content').find('.margin').children().each(function () {\n                        var $this = $(this),\n                            position = $this.position().top,\n                            height = $this.height(),\n                            pageMargin = parseInt($page.find('.content').css('margin-top')),\n                            pageContentLowerBoundary = pageMargin + contentHeight;\n\n                        //hasPageBreak = hasPageBreak || $this.hasClass('page-break');\n\n                        //if ($this.hasClass('page-break') && (!$pages[pageNumber + 1] || $pages[pageNumber + 1 ].find('.content').find('.margin').children().length < 1)) {\n                        //    hasPageBreak = true;\n                        //    return;\n                        //}\n\n                        if (hasPageBreak || position + height > pageContentLowerBoundary) {\n                            toNextPage.unshift(this);\n                        }\n                    });\n\n                    while (toNextPage.length > 0) {\n                        if (!$pages[ pageNumber + 1 ]) {\n                            $view.append(\n                                $pages[ pageNumber + 1 ] = new Page($paginator, pageNumber + 1)\n                            );\n                        }\n                        $pages[ pageNumber + 1 ].find('.content').find('.margin').prepend(toNextPage.shift());\n                        $paginator.data('lastPageNumber', pageNumber + 1);\n                    }\n                });\n            }\n\n            do {\n                splitContent(pagesWithBreaks = getPagesWithBreaks());\n            } while (pagesWithBreaks.length > 0);\n        }\n\n        function showAllPages() {\n            $pages.forEach(function ($page, i) {\n                $page\n                    .removeAttr('hidden')\n                    .setPageNumber(i);\n            });\n        }\n\n        function hideBlankPages() {\n            $pages.forEach(function ($page, i) {\n                if ($page.find('.content').find('.margin').children().length > 0 || i < 1) {\n                    return;\n                }\n                $page.attr('hidden', '');\n            });\n        }\n\n        function resetPageNumber() {\n            $paginator.trigger('paginator.pagenumberchange', { lastPageNumber: lastPageNumber });\n            $paginator.data('lastPageNumber', $view.find('.page').length);\n        }\n\n        function doRender() {\n            $paginator.data('_isRendering', true);\n            resetPageNumber();\n            if (!$pages[lastPageNumber]) {\n                $view.append(\n                    $pages[lastPageNumber] = new Page($paginator, lastPageNumber)\n                );\n\n                if ($view.find('.page').css('height') === 'auto') {\n                    throw new Error('Page dimensions should be explicitly set up! Either you have not included the default style or pages\\' dimensions have been set to auto.');\n                }\n            }\n\n            showAllPages();\n            layoutContent();\n            orderContent();\n            analyzePageBreaks();\n            hideBlankPages();\n            orderContent();\n\n            $paginator.data('_isRendering', false);\n            $paginator.trigger('paginator.modelchangeend', {});\n        }\n\n        function onWatchChange() {\n            //if (!isEventTriggered) {\n                $paginator.trigger('paginator.modelchangestart', {});\n                //isEventTriggered = true;\n            //}\n\n            if (!!$paginator.data('_isRendering')) {\n                return;\n            }\n\n            if (!!debounceTimer) {\n                clearTimeout(debounceTimer);\n            }\n\n            debounceTimer = setTimeout(function () {\n                doRender();\n            }, debounce);\n        }\n\n        $modelWatch\n            .addClass('watch')\n            .append($paginator.children());\n\n        modelObserver\n            .observe($modelWatch[0], {\n                childList: true,\n                attributes: true,\n                characterData: true,\n                subtree: true\n            });\n\n        $model\n            .addClass('model')\n            .append($modelWatch);\n\n        $view\n            .addClass('view')\n            .append($pages[0]);\n\n        $paginator\n            .addClass('paginator-component')\n            .append($model)\n            .append($view);\n\n        setTimeout(function () {\n            doRender();\n        });\n    };\n})();\n"]}