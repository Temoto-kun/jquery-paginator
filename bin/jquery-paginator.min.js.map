{"version":3,"sources":["paginator.js"],"names":["toAttrSelector","key","value","toClassSelector","classString","split","filter","string","trim","length","join","PaginatorOptions","rawOpts","PaginatorPageContent","klass","opts","createElement","self","$el","$","addClass","$margin","marginClass","append","page","this","clear","html","mountTo","parent","getBlocks","children","PaginatorPage","pageClass","header","content","footer","getContentHeight","$header","$footer","topHeight","Math","max","height","parseInt","css","bottomHeight","getContentLowerBoundary","paginator","headerClass","contentClass","footerClass","hasBreaks","getOverflowBlocks","isBlank","$block","position","top","unmount","remove","view","PaginatorRenderer","writePageComponents","pages","forEach","i","writeToBlockContainer","isClassHeaderFooter","getPageContent","firstPage","getContentMarginKey","getContentMarginValue","adjustMargin","labelControlElements","find","controlElsSelector","each","j","attr","idAttrName","blocks","pageContent","headerFooterIndex","model","getIndexForPage","isHeaderFooter","changedElementId","$renderedBlock","clone","parents","is","pageDeletedClass","off","$blockParent","blockParentClass","orderDataAttrName","data","parentDataAttrName","removeClass","pageBlockClass","pageAddedClass","on","e","d","$origEl","$this","removeAttr","val","trigger","type","setOrder","checkDeletedBlocks","isParentDeleted","hasClass","insertPageForContent","newPage","slice","pageIndex","addPage","getFirstPageWithBreak","pageToBreak","performPageBreaks","removeBlankPages","pagesToDelete","push","reverse","pageNumber","splice","orderContent","sortElements","block1","block2","order1","order2","keepFirstPage","doWriting","hasPerformedPageBreaks","lock","fn","detachObserver","isRendering","setTimeout","attachObserver","render","PaginatorModel","modelClass","$watch","watchClass","getBlockContainers","isTerminal","terminalClass","getCount","getIndexForTerminalBlockContainer","count","index","pageCount","getPageCount","lastIndex","$blocks","k","eq","hasTerminalBlockContainer","$blockContainer","getOrderedBlocks","PaginatorView","viewClass","addToPageList","isNaN","Paginator","renderer","commitMutations","mutations","debounceHandle","clearTimeout","bindToElement","componentClass","unpaginatedClass","createModel","$modelChildren","createView","createRenderer","observeModel","isObserving","observeModelEvents","areEventsAttached","attachEventListeners","doObserve","doRefresh","pub","modelObserver","MutationObserver","disconnect","observe","childList","attributes","characterData","subtree","refresh","jQuery","findShallow","sel","root","matching","first","sort","comparator","getSortable","placements","map","sortElement","call","parentNode","nextSibling","insertBefore","document","createTextNode","Error","removeChild","paginate"],"mappings":"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","file":"jquery-paginator.min.js","sourcesContent":["(function () {\n    var componentClass = 'paginator-component',\n        unpaginatedClass = 'paginator-unpaginated',\n        modelClass = 'model',\n        viewClass = 'view',\n        watchClass = 'watch',\n        pageClass = 'page',\n        pageBlockClass = 'page-block',\n        pageAddedClass = 'page-added',\n        pageDeletedClass = 'page-deleted',\n        contentClass = 'content',\n        headerClass = 'header',\n        footerClass = 'footer',\n        marginClass = 'margin',\n        parentDataAttrName = 'parent',\n        terminalClass = '-terminal',\n        blockParentClass = 'block-parent',\n        orderDataAttrName = 'data-order',\n        idAttrName = 'data-element-id',\n        controlElsSelector = 'input, select, textarea, button, a, meter';\n\n    // http://stackoverflow.com/questions/7051897/how-can-i-select-the-shallowest-matching-descendant\n    jQuery.fn.findShallow = function(sel) {\n        return (function findShallow(root, sel) {\n            var children = root.children();\n            if (children.length) {\n                var matching = children.filter(sel);\n                if (matching.length) {\n                    return matching.first();\n                }\n                return findShallow(children, sel);\n            }\n            return $();\n        })(this, sel);\n    };\n\n    // http://james.padolsey.com/snippets/sorting-elements-with-jquery/\n    jQuery.fn.sortElements = (function () {\n        var sort = [].sort;\n\n        return function (comparator, getSortable) {\n\n            getSortable = getSortable || function () { return this; };\n\n            var placements = this.map(function () {\n\n                var sortElement = getSortable.call(this),\n                    parentNode = sortElement.parentNode,\n\n                // Since the element itself will change position, we have\n                // to have some way of storing its original position in\n                // the DOM. The easiest way is to have a 'flag' node:\n                    nextSibling = parentNode.insertBefore(\n                        document.createTextNode(''),\n                        sortElement.nextSibling\n                    );\n\n                return function () {\n\n                    if (parentNode === this) {\n                        throw new Error(\n                            \"You can't sort elements if any one is a descendant of another.\"\n                        );\n                    }\n\n                    // Insert before flag:\n                    parentNode.insertBefore(this, nextSibling);\n                    // Remove flag:\n                    parentNode.removeChild(nextSibling);\n\n                };\n\n            });\n\n            return sort.call(this, comparator).each(function (i) {\n                placements[i].call(getSortable.call(this));\n            });\n\n        };\n\n    })();\n\n    function toAttrSelector(key, value) {\n        return '[' + key + '=\"' + value + '\"]';\n    }\n\n    /**\n     * Converts a class string to a CSS selector.\n     * @param {string} classString The class string.\n     * @returns {string} The selector string.\n     */\n    function toClassSelector(classString) {\n        return '.' + classString.split(' ').filter(function (string) { return string.trim().length > 0 }).join('.');\n    }\n\n    /**\n     * Class for the options for the paginator.\n     * @param {object} rawOpts The raw options data.\n     * @constructor\n     */\n    function PaginatorOptions(rawOpts) {\n        return rawOpts;\n    }\n\n    /**\n     * Class for the container of contents on a page.\n     * @param {string} klass The class name of the main HTML element generated by the component.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPageContent(klass, opts) {\n        var self = this,\n            page;\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(klass);\n            self.$margin = self.$margin = $('<div>').addClass(marginClass);\n\n            self.$el.append(self.$margin);\n        }\n\n        /**\n         * Appends a content to this component.\n         * @param {jQuery} $el The element to append.\n         */\n        self.append = function append($el) {\n            self.$margin.append($el);\n        };\n\n        /**\n         * Clears the page content.\n         */\n        self.clear = function clear() {\n            self.$margin.html('');\n        };\n\n        /**\n         * Mounts this component to a parent component.\n         * @param {object} parent The parent component.\n         */\n        self.mountTo = function mountTo(parent) {\n            if (page === parent) {\n                return;\n            }\n\n            page = parent;\n            page.$el.append(self.$el);\n        };\n\n        /**\n         * Gets the content blocks of this component.\n         * @returns {jQuery} The content blocks of this component.\n         */\n        self.getBlocks = function getBlocks() {\n            return self.$margin.children();\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the page that is to be rendered in the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPage(opts) {\n        var self = this,\n            paginator;\n\n        self.header = new PaginatorPageContent(headerClass, opts);\n        self.content = new PaginatorPageContent(contentClass, opts);\n        self.footer = new PaginatorPageContent(footerClass, opts);\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(pageClass);\n            self.$el\n                .append(self.header.$el)\n                .append(self.content.$el)\n                .append(self.footer.$el);\n        }\n\n        /**\n         * Gets the content height of the page.\n         * @returns {number} The content height of the page.\n         */\n        function getContentHeight() {\n            var $header = self.header.$el,\n                $footer = self.footer.$el,\n                $margin = self.content.$margin,\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top'))),\n                bottomHeight = Math.max($footer.length > 0 ? $footer.height() : 0, parseInt($margin.css('margin-bottom')));\n\n            return self.$el.height() - topHeight - bottomHeight;\n        }\n\n        /**\n         * Gets the current page index.\n         * @returns {number} The current page index.\n         */\n        function getPageIndex() {\n            var pageIndex = -1;\n\n            paginator.pages.forEach(function (page, i) {\n                if (page !== self) {\n                    return;\n                }\n\n                pageIndex = i;\n            });\n\n            return pageIndex;\n        }\n\n        /**\n         * Gets the lower boundary of the page.\n         * @returns {number} The lower boundary of the page.\n         */\n        function getContentLowerBoundary() {\n            var $header = self.header.$el,\n                $margin = self.content.$margin,\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top')));\n            return topHeight + getContentHeight();\n        }\n\n        /**\n         * Determines if the page has elements that can trigger page breaks.\n         * @returns {boolean} Does the page require breaks?\n         */\n        self.hasBreaks = function hasBreaks() {\n            return self.getOverflowBlocks().length > 0;\n        };\n\n        /**\n         * Determines if the page is blank (no blocks currently written).\n         * @returns {boolean} Is the page blank?\n         */\n        self.isBlank = function isBlank() {\n            return self.content.$margin.children().length < 1;\n        };\n\n        /**\n         * Gets the elements that overflow the content area of the page.\n         * @returns {jQuery} The elements.\n         */\n        self.getOverflowBlocks = function getOverflowBlocks() {\n            return self.content.getBlocks()\n                .filter(function () {\n                    var $block = $(this),\n                        position = $block.position().top,\n                        height = $block.height();\n\n                    return position + height > getContentLowerBoundary();\n                });\n        };\n\n        /**\n         * Unmounts the page.\n         */\n        self.unmount = function unmount() {\n            self.$el.remove();\n        };\n\n        /**\n         * Mounts the component to a parent.\n         * @param {object} parent The component\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.view.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the renderer of the paginator.\n     * @param {PaginatorOptions} opts\n     * @constructor\n     */\n    function PaginatorRenderer(opts) {\n        var self = this,\n            model,\n            view,\n            paginator,\n            firstPage = new PaginatorPage(opts),\n            isRendering = false;\n\n        /**\n         * Writes the appropriate headers and the footers of the page.\n         */\n        function writePageComponents() {\n            paginator.pages.forEach(function (page, i) {\n                writeToBlockContainer(headerClass, page, i);\n                writeToBlockContainer(footerClass, page, i);\n            });\n        }\n\n        /**\n         * Writes the content of the page.\n         */\n        function writeToBlockContainer(klass, page, i) {\n            var headerFooterIndex = model.getIndexForPage(klass, i),\n                blocks,\n                isHeaderFooter = isClassHeaderFooter(klass),\n                pageContent;\n\n            function isClassHeaderFooter(klass) {\n                return klass === headerClass || klass === footerClass;\n            }\n\n            function getPageContent(klass) {\n                switch (klass) {\n                    case headerClass:\n                        return page.header;\n                    case footerClass:\n                        return page.footer;\n                    case contentClass:\n                        return firstPage.content;\n                    default:\n                        break;\n                }\n            }\n\n            function getContentMarginKey(klass) {\n                switch (klass) {\n                    case headerClass:\n                        return 'margin-top';\n                    case footerClass:\n                        return 'margin-bottom';\n                    default:\n                        break;\n                }\n            }\n\n            function getContentMarginValue(klass) {\n                switch (klass) {\n                    case headerClass:\n                    case footerClass:\n                        return getPageContent(klass).$el.height;\n                    default:\n                        break;\n                }\n            }\n\n            function adjustMargin(klass) {\n                var key = getContentMarginKey(klass),\n                    value;\n\n                if (!key) {\n                    return;\n                }\n\n                value = getContentMarginValue(klass);\n\n                page.content.$margin.css(key, value);\n            }\n\n            function labelControlElements($block) {\n                $block\n                    .find(controlElsSelector)\n                    .each(function (j) {\n                        $(this).attr(idAttrName, '' + i + '.' + j);\n                    });\n            }\n\n            pageContent = getPageContent(klass);\n\n            if (!pageContent) {\n                // No page content to put the blocks to\n                return;\n            }\n\n            if (isHeaderFooter) {\n                pageContent.clear();\n            }\n\n            if (headerFooterIndex < 0) {\n                // No header/footer in this page\n                return;\n            }\n\n            blocks = model.getBlocks(klass);\n\n            if (isHeaderFooter) {\n                // get appropriate header/footer index for this page\n                blocks = blocks(headerFooterIndex);\n            }\n\n            blocks\n                .each(function (i) {\n                    var $block = $(this),\n                        $renderedBlock = $block,\n                        changedElementId;\n\n                    labelControlElements($block);\n                    if (isHeaderFooter) {\n                        $renderedBlock = $block.clone(true, true);\n                    }\n\n                    if (!$block.parents().is('body') || $block.parents(toClassSelector(pageDeletedClass)).length > 0) {\n                        // block is detached and not visible, or is deleted.\n                        $renderedBlock.off('change', controlElsSelector);\n                        return;\n                    }\n\n                    $blockParent = $block.parent();\n\n                    $blockParent\n                        .addClass(blockParentClass)\n                        .attr(orderDataAttrName, 0);\n\n                    $renderedBlock\n                        .attr(idAttrName, i)\n                        .data(parentDataAttrName, $blockParent)\n                        .removeClass(pageBlockClass)\n                        .addClass(pageAddedClass)\n                        .on('change', controlElsSelector, function (e, d) {\n                            var $origEl,\n                                $this = $(this);\n\n                            if (klass !== headerClass && klass !== footerClass) {\n                                return;\n                            }\n\n                            changedElementId = $this.attr(idAttrName);\n                            $origEl = $blockParent.find(toAttrSelector(idAttrName, changedElementId));\n\n                            if ($this.is('select')) {\n                                $origEl\n                                    .find('option')\n                                    .removeAttr('selected')\n                                    .filter(toAttrSelector('value', $this.val()))\n                                    .attr('selected', 'selected');\n                            }\n\n                            $origEl\n                                .val($this.val())\n                                .trigger(e.type, d);\n                        });\n\n                    pageContent.append($renderedBlock);\n                });\n\n            adjustMargin(klass);\n        }\n\n        /**\n         * Sets the ordering of each block rendered in the view.\n         */\n        function setOrder() {\n            model.$el\n                .find(toClassSelector(blockParentClass))\n                .each(function (i) {\n                    $(this).attr(orderDataAttrName, i);\n                });\n\n            view.getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent = $block.data(parentDataAttrName);\n\n                    $block.attr(orderDataAttrName, $blockParent.attr(orderDataAttrName));\n                });\n        }\n\n        /**\n         * Checks the view for deleted blocks and performs the appropriate actions.\n         */\n        function checkDeletedBlocks() {\n            view\n                .getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent,\n                        isParentDeleted;\n\n                    $blockParent = $block.data(parentDataAttrName);\n\n                    isParentDeleted = !$blockParent ||\n                            $blockParent.hasClass(pageDeletedClass) ||\n                            $blockParent.parents(toClassSelector(pageDeletedClass)).length > 0 ||\n                            !$blockParent.parents().is('body');\n\n                    if (!isParentDeleted) {\n                        return;\n                    }\n\n                    $block.remove();\n                });\n        }\n\n        /**\n         * Inserts a page for new content.\n         * @param {{blocks:jQuery,pageIndex:number}} content The content.\n         */\n        function insertPageForContent(content) {\n            var newPage = new PaginatorPage(opts);\n\n            content.blocks.each(function () {\n                newPage.content.append($(this));\n            });\n\n            paginator.pages.slice(content.pageIndex + 1).forEach(function (page) {\n                newPage.content.append(page.content.getBlocks());\n            });\n\n            view.addPage(newPage);\n        }\n\n        /**\n         * Gets the content of the first page that has a break.\n         * @returns {{blocks:jQuery,pageIndex:number}} The content to insert.\n         */\n        function getFirstPageWithBreak() {\n            var pageToBreak = null;\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.hasBreaks() || pageToBreak !== null) {\n                    return;\n                }\n\n                // Get the first page to have page breaks.\n                pageToBreak = {\n                    pageIndex: i,\n                    blocks: page.getOverflowBlocks()\n                };\n            });\n\n            return pageToBreak;\n        }\n\n        /**\n         * Performs page breaks among the view's pages.\n         * @returns {boolean} A value that determines if the renderer performed page breaks, which is used to repeat this method.\n         */\n        function performPageBreaks() {\n            var pageToBreak = getFirstPageWithBreak();\n\n            if (pageToBreak === null) {\n                return false;\n            }\n\n            insertPageForContent(pageToBreak);\n            return true;\n        }\n\n        /**\n         *\n         */\n        function removeBlankPages() {\n            var pagesToDelete = [];\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.isBlank()) {\n                    return;\n                }\n                pagesToDelete.push(i);\n            });\n\n            pagesToDelete\n                .reverse()\n                .forEach(function (pageNumber) {\n                    if (paginator.pages.length < 2) {\n                        return;\n                    }\n                    paginator.pages[pageNumber].unmount();\n                    paginator.pages.splice(pageNumber, 1);\n                });\n        }\n\n        /**\n         *\n         */\n        function orderContent() {\n            view\n                .$el\n                .find('.content')\n                .find('.margin')\n                .children()\n                .sortElements(function (block1, block2) {\n                    var order1 = parseInt($(block1).attr(orderDataAttrName)),\n                        order2 = parseInt($(block2).attr(orderDataAttrName));\n\n                    return order1 - order2;\n                });\n        }\n\n        function keepFirstPage() {\n            if (paginator.pages.length > 0) {\n                return;\n            }\n            view.addPage(firstPage);\n        }\n\n        function doWriting() {\n            var hasPerformedPageBreaks;\n            do {\n                hasPerformedPageBreaks = performPageBreaks();\n                writePageComponents();\n            } while (hasPerformedPageBreaks);\n        }\n\n        function lock(fn) {\n            paginator.detachObserver();\n            isRendering = false;\n\n            fn();\n\n            setTimeout(function () {\n                paginator.attachObserver();\n                isRendering = true;\n            });\n        }\n\n        /**\n         * Renders the content.\n         */\n        self.render = function render() {\n            lock(function () {\n                keepFirstPage();\n                checkDeletedBlocks();\n                // TODO implement hard page/section breaks\n                // section breaks are what reset the header indexing, etc.\n                // TODO move elements when extra space has been found on previous pages.\n                writeToBlockContainer(contentClass);\n                setOrder();\n                orderContent();\n                doWriting();\n                removeBlankPages();\n                doWriting();\n            });\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            paginator = parent;\n            model = paginator.model;\n            view = paginator.view;\n        };\n    }\n\n    /**\n     * Class for the model of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorModel(opts) {\n        var self = this,\n            paginator;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(modelClass);\n            if (!!self.$watch) {\n                return;\n            }\n            self.$watch = self.$watch || $('<div>').addClass(watchClass);\n            self.$el.append(self.$watch);\n        }\n\n        /**\n         *\n         * @param klass\n         * @param isTerminal\n         * @returns {*}\n         */\n        function getBlockContainers(klass, isTerminal) {\n            return self.$watch.find(toClassSelector(!!isTerminal ? klass + ' ' + terminalClass : klass));\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        function getCount(klass) {\n            return getBlockContainers(klass).length;\n        }\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {number}\n         */\n        function getIndexForTerminalBlockContainer(klass, pageNumber) {\n            var i,\n                count = getCount(klass),\n                index = -1,\n                pageCount = paginator.view.getPageCount(),\n                lastIndex = pageCount - 1,\n                $blocks = getBlockContainers(klass);\n\n            if (count === 1) {\n                switch (klass) {\n                    case headerClass:\n                        return pageNumber === 0 ? 0 : -1;\n                    case footerClass:\n                        return pageNumber === lastIndex ? 0 : -1;\n                    default:\n                        break;\n                }\n            }\n\n            i = 0;\n            do {\n                index = (index + 1) % count;\n                if (pageNumber === 0 && klass === headerClass ||\n                    pageNumber === lastIndex && klass === footerClass) {\n                    $blocks.each(function (k) {\n                        if (!$(this).hasClass(terminalClass)) {\n                            return;\n                        }\n                        index = k;\n                    });\n                    return index;\n                }\n\n                if ($blocks.eq(index).hasClass(terminalClass)) {\n                    index++;\n                }\n\n                i++;\n            } while (i < pageNumber);\n\n            return index;\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {boolean}\n         */\n        self.hasTerminalBlockContainer = function hasTerminalBlockContainer(klass) {\n            return getBlockContainers(klass, true).length > 0;\n        };\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {*}\n         */\n        self.getIndexForPage = function getIndexForPage(klass, pageNumber) {\n            if (!self.hasTerminalBlockContainer(klass)) {\n                return pageNumber % getCount(klass);\n            }\n\n            return getIndexForTerminalBlockContainer(klass, pageNumber);\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            switch (klass) {\n                case headerClass:\n                case footerClass:\n                    return function (i) {\n                        var $blockContainer = getBlockContainers(klass).eq(i),\n\n                            isTerminal = $blockContainer.hasClass(terminalClass),\n                            $blocks = $blockContainer.find(toClassSelector(pageBlockClass));\n\n                        return isTerminal ?\n                            $blocks.addClass(terminalClass) :\n                            $blocks.removeClass(terminalClass);\n                    };\n                default:\n                    break;\n            }\n\n            return getBlockContainers(klass).find(toClassSelector(pageBlockClass));\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*|{}}\n         */\n        self.getOrderedBlocks = function getOrderedBlocks(klass) {\n            return getBlockContainers(klass).find('[' + orderDataAttrName + ']');\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the view of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorView(opts) {\n        var self = this;\n\n        self.paginator = null;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(viewClass);\n        }\n\n        /**\n         *\n         * @param page\n         * @param i\n         */\n        function addToPageList(page, i) {\n            if (isNaN(i) || i === null) {\n                self.paginator.pages.push(page);\n                return;\n            }\n\n            self.paginator.pages.splice(i, 0, page);\n        }\n\n        /**\n         *\n         * @returns {Number}\n         */\n        self.getPageCount = function getPageCount() {\n            return self.paginator.pages.length;\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {XMLList}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            return self.$el\n                .find(toClassSelector(klass))\n                .children(toClassSelector(marginClass))\n                .children();\n        };\n\n        /**\n         *\n         * @param page\n         * @param i\n         * @returns {*}\n         */\n        self.addPage = function addPage(page, i) {\n            addToPageList(page, i);\n            page.mountTo(self.paginator);\n            return page;\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            self.paginator = parent;\n            self.paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the paginator.\n     * @param {Element} $el The element.\n     * @param {object} opts The options of the paginator.\n     * @constructor\n     */\n    function Paginator($el, opts) {\n        var self = this,\n            modelObserver = new MutationObserver(commitMutations),\n            pub,\n            areEventsAttached = false,\n            isObserving = false,\n            debounceHandle = null;\n\n        opts = new PaginatorOptions(opts);\n\n        /**\n         *\n         * @type {PaginatorModel}\n         */\n        self.model = new PaginatorModel(opts);\n\n        /**\n         *\n         * @type {PaginatorView}\n         */\n        self.view = new PaginatorView(opts);\n\n        /**\n         *\n         * @type {PaginatorRenderer}\n         */\n        self.renderer = new PaginatorRenderer(opts);\n\n        /**\n         *\n         * @type {Array}\n         */\n        self.pages = self.pages || [];\n\n        /**\n         *\n         */\n        function render() {\n            self.renderer.render();\n        }\n\n        function commitMutations(mutations) {\n            var isHeaderFooterElement;\n\n            //isHeaderFooterElement = mutations.reduce(function (isElement, mutation) {\n            //    var $parents = $(mutation.target).parents();\n            //\n            //    return isElement && (\n            //            $parents.is(toClassSelector(headerClass)) ||\n            //            $parents.is(toClassSelector(footerClass))\n            //        );\n            //}, true);\n\n            //if (isHeaderFooterElement) {\n            //    return;\n            //}\n\n            if (!!debounceHandle) {\n                clearTimeout(debounceHandle);\n            }\n\n            debounceHandle = setTimeout(function () {\n                render();\n            }, 250);\n        }\n\n        /**\n         *\n         * @param $el\n         */\n        function bindToElement($el) {\n            if (!!self.$el) {\n                self.$el.removeClass(componentClass);\n            }\n            self.$el = $el;\n            if (self.$el.hasClass(componentClass)) {\n                return;\n            }\n            self.$el\n                .addClass(componentClass)\n                .removeClass(unpaginatedClass);\n        }\n\n        /**\n         *\n         */\n        function createModel() {\n            var $modelChildren;\n\n            self.model.mountTo(self);\n\n            $modelChildren = self\n                .$el\n                .find(\n                //.findShallow(\n                    [\n                        toClassSelector(headerClass),\n                        toClassSelector(contentClass),\n                        toClassSelector(footerClass)\n                    ]\n                        .join(',')\n                );\n\n            self.model.$watch.append($modelChildren);\n        }\n\n        /**\n         *\n         */\n        function createView() {\n            self.view.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        function createRenderer() {\n            self.renderer.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        self.detachObserver = function detachObserver() {\n            modelObserver.disconnect();\n        };\n\n        /**\n         *\n         */\n        self.attachObserver = function attachObserver() {\n            modelObserver\n                .observe(self.model.$watch[0], {\n                    childList: true,\n                    attributes: true,\n                    characterData: true,\n                    subtree: true\n                });\n        };\n\n        /**\n         *\n         */\n        self.attachEventListeners = function attachEventListeners() {\n            self.model.$watch\n                .on('change', 'input, select, textarea', function (e) {\n                    if (!isObserving) {\n                        return;\n                    }\n\n                    commitMutations(e);\n                });\n        };\n\n        /**\n         *\n         */\n        function observeModel() {\n            if (!!isObserving) {\n                return;\n            }\n            self.attachObserver();\n            isObserving = true;\n        }\n\n        /**\n         *\n         */\n        function observeModelEvents() {\n            if (!!areEventsAttached) {\n                return;\n            }\n            self.attachEventListeners();\n            areEventsAttached = true;\n        }\n\n        /**\n         *\n         */\n        function doObserve() {\n            observeModel();\n            observeModelEvents();\n        }\n\n        /**\n         *\n         */\n        function doRefresh() {\n            render();\n        }\n\n        pub = (function PaginatorInstance() {\n            return {\n                observe: doObserve,\n                refresh: doRefresh\n            };\n        })();\n\n        bindToElement($el);\n        createModel();\n        createView();\n        createRenderer();\n        doObserve();\n        $el.data('paginator', pub);\n        return pub;\n    }\n\n    $.fn.paginate = function paginate(opts) {\n        return new Paginator(this, opts);\n    };\n})();\n"]}