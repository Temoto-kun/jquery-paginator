{"version":3,"sources":["paginator.js"],"names":["toClassSelector","classString","split","filter","string","trim","length","join","PaginatorOptions","rawOpts","PaginatorPageContent","klass","opts","createElement","self","$el","$","addClass","$margin","marginClass","append","page","this","clear","html","mountTo","parent","getBlocks","children","PaginatorPage","pageClass","header","content","footer","getContentHeight","$header","$footer","topHeight","Math","max","height","parseInt","css","bottomHeight","getContentLowerBoundary","paginator","headerClass","contentClass","footerClass","hasBreaks","getOverflowBlocks","isBlank","$block","position","top","unmount","remove","view","PaginatorRenderer","writePageComponents","pages","forEach","i","writeToBlockContainer","blocks","blockContainerIndex","model","getIndexForPage","isClone","each","$renderedBlock","clone","parents","pageDeletedClass","$blockParent","blockParentClass","attr","orderDataAttrName","data","parentDataAttrName","removeClass","pageBlockClass","pageAddedClass","firstPage","find","setOrder","checkDeletedBlocks","isParentDeleted","hasClass","is","insertPageForContent","newPage","slice","pageIndex","addPage","getFirstPageWithBreak","pageToBreak","performPageBreaks","removeBlankPages","pagesToDelete","push","reverse","pageNumber","splice","isRendering","render","detachObserver","hasPerformedPageBreaks","setTimeout","observeModel","PaginatorModel","modelClass","$watch","watchClass","getBlockContainers","isTerminal","terminalClass","getCount","getIndexForTerminalBlockContainer","count","index","pageCount","getPageCount","lastIndex","$blocks","k","eq","hasTerminalBlockContainer","$blockContainer","getOrderedBlocks","PaginatorView","viewClass","addToPageList","isNaN","Paginator","renderer","commitMutations","bindToElement","componentClass","unpaginatedClass","createModel","$modelChildren","createView","createRenderer","pub","modelObserver","MutationObserver","isObserving","disconnect","observe","childList","attributes","characterData","subtree","refresh","bindTo","jQuery","fn","findShallow","sel","root","matching","first","sortElements","sort","comparator","getSortable","placements","map","sortElement","call","parentNode","nextSibling","insertBefore","document","createTextNode","Error","removeChild","paginate"],"mappings":"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","file":"jquery-paginator.min.js","sourcesContent":["(function () {\n    var componentClass = 'paginator-component',\n        unpaginatedClass = 'paginator-unpaginated',\n        modelClass = 'model',\n        viewClass = 'view',\n        watchClass = 'watch',\n        pageClass = 'page',\n        pageBlockClass = 'page-block',\n        pageAddedClass = 'page-added',\n        pageDeletedClass = 'page-deleted',\n        contentClass = 'content',\n        headerClass = 'header',\n        footerClass = 'footer',\n        marginClass = 'margin',\n        parentDataAttrName = 'parent',\n        terminalClass = '-terminal',\n        blockParentClass = 'block-parent',\n        orderDataAttrName = 'data-order';\n\n    // http://stackoverflow.com/questions/7051897/how-can-i-select-the-shallowest-matching-descendant\n    jQuery.fn.findShallow = function(sel) {\n        return (function findShallow(root, sel) {\n            var children = root.children();\n            if (children.length) {\n                var matching = children.filter(sel);\n                if (matching.length) {\n                    return matching.first();\n                }\n                return findShallow(children, sel);\n            }\n            return $();\n        })(this, sel);\n    };\n\n    // http://james.padolsey.com/snippets/sorting-elements-with-jquery/\n    jQuery.fn.sortElements = (function () {\n        var sort = [].sort;\n\n        return function (comparator, getSortable) {\n\n            getSortable = getSortable || function () { return this; };\n\n            var placements = this.map(function () {\n\n                var sortElement = getSortable.call(this),\n                    parentNode = sortElement.parentNode,\n\n                // Since the element itself will change position, we have\n                // to have some way of storing its original position in\n                // the DOM. The easiest way is to have a 'flag' node:\n                    nextSibling = parentNode.insertBefore(\n                        document.createTextNode(''),\n                        sortElement.nextSibling\n                    );\n\n                return function () {\n\n                    if (parentNode === this) {\n                        throw new Error(\n                            \"You can't sort elements if any one is a descendant of another.\"\n                        );\n                    }\n\n                    // Insert before flag:\n                    parentNode.insertBefore(this, nextSibling);\n                    // Remove flag:\n                    parentNode.removeChild(nextSibling);\n\n                };\n\n            });\n\n            return sort.call(this, comparator).each(function (i) {\n                placements[i].call(getSortable.call(this));\n            });\n\n        };\n\n    })();\n\n    /**\n     * Converts a class string to a CSS selector.\n     * @param {string} classString The class string.\n     * @returns {string} The selector string.\n     */\n    function toClassSelector(classString) {\n        return '.' + classString.split(' ').filter(function (string) { return string.trim().length > 0 }).join('.');\n    }\n\n    /**\n     * Class for the options for the paginator.\n     * @param {object} rawOpts The raw options data.\n     * @constructor\n     */\n    function PaginatorOptions(rawOpts) {\n        return rawOpts;\n    }\n\n    /**\n     * Class for the container of contents on a page.\n     * @param {string} klass The class name of the main HTML element generated by the component.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPageContent(klass, opts) {\n        var self = this,\n            page;\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(klass);\n            self.$margin = self.$margin = $('<div>').addClass(marginClass);\n\n            self.$el.append(self.$margin);\n        }\n\n        /**\n         * Appends a content to this component.\n         * @param {jQuery} $el The element to append.\n         */\n        self.append = function append($el) {\n            self.$margin.append($el);\n        };\n\n        /**\n         *\n         */\n        self.clear = function clear() {\n            self.$margin.html('');\n        };\n\n        /**\n         * Mounts this component to a parent component.\n         * @param {object} parent The parent component.\n         */\n        self.mountTo = function mountTo(parent) {\n            if (page === parent) {\n                return;\n            }\n\n            page = parent;\n            page.$el.append(self.$el);\n        };\n\n        /**\n         * Gets the content blocks of this component.\n         * @returns {jQuery} The content blocks of this component.\n         */\n        self.getBlocks = function getBlocks() {\n            return self.$margin.children();\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the page that is to be rendered in the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPage(opts) {\n        var self = this,\n            paginator;\n\n        self.header = new PaginatorPageContent(headerClass, opts);\n        self.content = new PaginatorPageContent(contentClass, opts);\n        self.footer = new PaginatorPageContent(footerClass, opts);\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(pageClass);\n            self.$el\n                .append(self.header.$el)\n                .append(self.content.$el)\n                .append(self.footer.$el);\n        }\n\n        /**\n         * Gets the content height of the page.\n         * @returns {number} The content height of the page.\n         */\n        function getContentHeight() {\n            var $header = self.header.$el,\n                $footer = self.footer.$el,\n                $margin = self.content.$margin,\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top'))),\n                bottomHeight = Math.max($footer.length > 0 ? $footer.height() : 0, parseInt($margin.css('margin-bottom')));\n\n            return self.$el.height() - topHeight - bottomHeight;\n        }\n\n        function getPageIndex() {\n            var pageIndex = -1;\n\n            paginator.pages.forEach(function (page, i) {\n                if (page !== self) {\n                    return;\n                }\n\n                pageIndex = i;\n            });\n\n            return pageIndex;\n        }\n\n        /**\n         * Gets the lower boundary of the page.\n         * @returns {number} The lower boundary of the page.\n         */\n        function getContentLowerBoundary() {\n            var $header = self.header.$el,\n                $margin = self.content.$margin,\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top')));\n            return topHeight + getContentHeight();\n        }\n\n        /**\n         * Determines if the page has elements that can trigger page breaks.\n         * @returns {boolean}\n         */\n        self.hasBreaks = function hasBreaks() {\n            return self.getOverflowBlocks().length > 0;\n        };\n\n        self.isBlank = function isBlank() {\n            return self.content.$margin.children().length < 1;\n        };\n\n        /**\n         * Gets the elements that overflow the content area of the page.\n         * @returns {jQuery} The elements.\n         */\n        self.getOverflowBlocks = function getOverflowBlocks() {\n            return self.content.getBlocks()\n                .filter(function () {\n                    var $block = $(this),\n                        position = $block.position().top,\n                        height = $block.height();\n\n                    return position + height > getContentLowerBoundary();\n                });\n        };\n\n        self.unmount = function unmount() {\n            self.$el.remove();\n        };\n\n        /**\n         * Mounts the component to a parent.\n         * @param {object} parent The component\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.view.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the renderer of the paginator.\n     * @param {PaginatorOptions} opts\n     * @constructor\n     */\n    function PaginatorRenderer(opts) {\n        var self = this,\n            model,\n            view,\n            paginator,\n            firstPage = new PaginatorPage(opts),\n            isRendering = false;\n\n        /**\n         * Writes the appropriate headers and the footers of the page.\n         */\n        function writePageComponents() {\n            paginator.pages.forEach(function (page, i) {\n                writeToBlockContainer(headerClass, page, i);\n                writeToBlockContainer(footerClass, page, i);\n            });\n        }\n\n        /**\n         * Writes the content of the page.\n         */\n        function writeToBlockContainer(klass, page, i) {\n            var blockContainerIndex = model.getIndexForPage(klass, i),\n                blocks,\n                isClone = false;\n\n            // TODO refactor this part of the code.\n\n            if (blockContainerIndex < 0) {\n                switch (klass) {\n                    case headerClass:\n                        page.header.clear();\n                        return;\n                    case footerClass:\n                        page.footer.clear();\n                        return;\n                    default:\n                        break;\n                }\n                return;\n            }\n\n            switch (klass) {\n                case footerClass:\n                    page.footer.clear();\n                    blocks = model.getBlocks(klass)(blockContainerIndex);\n                    isClone = true;\n                    break;\n                case headerClass:\n                    page.header.clear();\n                    blocks = model.getBlocks(klass)(blockContainerIndex);\n                    isClone = true;\n                    break;\n                default:\n                    blocks = model.getBlocks(klass);\n                    break;\n            }\n\n            blocks\n                .each(function () {\n                    var $block = $(this),\n                        $renderedBlock = $block;\n\n                    if (isClone) {\n                        $renderedBlock = $block.clone(true, true);\n                    }\n\n                    if ($block.parents(toClassSelector(pageDeletedClass)).length > 0) {\n                        return;\n                    }\n\n                    $blockParent = $block.parent();\n\n                    $blockParent\n                        .addClass(blockParentClass)\n                        .attr(orderDataAttrName, 0);\n\n                    $renderedBlock\n                        .data(parentDataAttrName, $blockParent)\n                        .removeClass(pageBlockClass)\n                        .addClass(pageAddedClass);\n\n                    switch (klass) {\n                        case headerClass:\n                            page.header.append($renderedBlock);\n                            return;\n                        case footerClass:\n                            page.footer.append($renderedBlock);\n                            return;\n                        default:\n                            break;\n                    }\n\n                    firstPage.content.append($renderedBlock);\n                });\n\n            switch (klass) {\n                case headerClass:\n                    page.content.$margin.css('margin-top', page.$el.find(toClassSelector(klass)).height());\n                    break;\n                case footerClass:\n                    page.content.$margin.css('margin-bottom', page.$el.find(toClassSelector(klass)).height());\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Sets the ordering of each block rendered in the view.\n         */\n        function setOrder() {\n            model.$el\n                .find(toClassSelector(blockParentClass))\n                .each(function (i) {\n                    $(this).attr(orderDataAttrName, i);\n                });\n\n            view.getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent = $block.data(parentDataAttrName);\n\n                    $block.attr(orderDataAttrName, $blockParent.attr(orderDataAttrName));\n                });\n        }\n\n        /**\n         * Checks the view for deleted blocks and performs the appropriate actions.\n         */\n        function checkDeletedBlocks() {\n            view\n                .getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent,\n                        isParentDeleted;\n\n                    $blockParent = $block.data(parentDataAttrName);\n\n                    isParentDeleted = !$blockParent ||\n                            $blockParent.hasClass(pageDeletedClass) ||\n                            $blockParent.parents(toClassSelector(pageDeletedClass)).length > 0 ||\n                            !$blockParent.parents().is('body');\n\n                    if (!isParentDeleted) {\n                        return;\n                    }\n\n                    $block.remove();\n                });\n        }\n\n        /**\n         * Inserts a page for new content.\n         * @param {{blocks:jQuery,pageIndex:number}} content The content.\n         */\n        function insertPageForContent(content) {\n            var newPage = new PaginatorPage(opts);\n\n            content.blocks.each(function () {\n                newPage.content.append($(this));\n            });\n\n            paginator.pages.slice(content.pageIndex + 1).forEach(function (page) {\n                newPage.content.append(page.content.getBlocks());\n            });\n\n            view.addPage(newPage);\n        }\n\n        /**\n         * Gets the content of the first page that has a break.\n         * @returns {{blocks:jQuery,pageIndex:number}} The content to insert.\n         */\n        function getFirstPageWithBreak() {\n            var pageToBreak = null;\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.hasBreaks() || pageToBreak !== null) {\n                    return;\n                }\n\n                // Get the first page to have page breaks.\n                pageToBreak = {\n                    pageIndex: i,\n                    blocks: page.getOverflowBlocks()\n                };\n            });\n\n            return pageToBreak;\n        }\n\n        /**\n         * Performs page breaks among the view's pages.\n         * @returns {boolean} A value that determines if the renderer performed page breaks, which is used to repeat this method.\n         */\n        function performPageBreaks() {\n            var pageToBreak = getFirstPageWithBreak();\n\n            if (pageToBreak === null) {\n                return false;\n            }\n\n            insertPageForContent(pageToBreak);\n            return true;\n        }\n\n        function removeBlankPages() {\n            var pagesToDelete = [];\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.isBlank()) {\n                    return;\n                }\n                pagesToDelete.push(i);\n            });\n\n            pagesToDelete\n                .reverse()\n                .forEach(function (pageNumber) {\n                    if (paginator.pages.length < 2) {\n                        return;\n                    }\n                    paginator.pages[pageNumber].unmount();\n                    paginator.pages.splice(pageNumber, 1);\n                });\n        }\n\n        function orderContent() {\n            view\n                .$el\n                .find('.content')\n                .find('.margin')\n                .children()\n                .sortElements(function (block1, block2) {\n                    var order1 = parseInt($(block1).attr(orderDataAttrName)),\n                        order2 = parseInt($(block2).attr(orderDataAttrName));\n\n                    return order1 - order2;\n                });\n        }\n\n        /**\n         * Renders the content.\n         */\n        self.render = function render() {\n            paginator.detachObserver();\n            if (paginator.pages.length < 1) {\n                view.addPage(firstPage);\n            }\n\n            var hasPerformedPageBreaks;\n            checkDeletedBlocks();\n            // TODO move elements when extra space has been found on previous pages.\n            writeToBlockContainer(contentClass);\n            setOrder();\n            do {\n                hasPerformedPageBreaks = performPageBreaks();\n                writePageComponents();\n            } while (hasPerformedPageBreaks);\n            removeBlankPages();\n            do {\n                hasPerformedPageBreaks = performPageBreaks();\n                writePageComponents();\n            } while (hasPerformedPageBreaks);\n\n            setTimeout(function () {\n                isRendering = false;\n            });\n            paginator.observeModel();\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            paginator = parent;\n            model = paginator.model;\n            view = paginator.view;\n        };\n    }\n\n    /**\n     * Class for the model of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorModel(opts) {\n        var self = this,\n            paginator;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(modelClass);\n            if (!!self.$watch) {\n                return;\n            }\n            self.$watch = self.$watch || $('<div>').addClass(watchClass);\n            self.$el.append(self.$watch);\n        }\n\n        /**\n         *\n         * @param klass\n         * @param isTerminal\n         * @returns {*}\n         */\n        function getBlockContainers(klass, isTerminal) {\n            return self.$watch.find(toClassSelector(!!isTerminal ? klass + ' ' + terminalClass : klass));\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        function getCount(klass) {\n            return getBlockContainers(klass).length;\n        }\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {number|*}\n         */\n        function getIndexForTerminalBlockContainer(klass, pageNumber) {\n            var i,\n                count = getCount(klass),\n                index = -1,\n                pageCount = paginator.view.getPageCount(),\n                lastIndex = pageCount - 1,\n                $blocks = getBlockContainers(klass);\n\n            if (count === 1) {\n                switch (klass) {\n                    case headerClass:\n                        return pageNumber === 0 ? 0 : -1;\n                    case footerClass:\n                        return pageNumber === lastIndex ? 0 : -1;\n                    default:\n                        break;\n                }\n            }\n\n            i = 0;\n            do {\n                index = (index + 1) % count;\n                if (pageNumber === 0 && klass === headerClass ||\n                    pageNumber === lastIndex && klass === footerClass) {\n                    $blocks.each(function (k) {\n                        if (!$(this).hasClass(terminalClass)) {\n                            return;\n                        }\n                        index = k;\n                    });\n                    return index;\n                }\n\n                if ($blocks.eq(index).hasClass(terminalClass)) {\n                    index++;\n                }\n\n                i++;\n            } while (i < pageNumber);\n\n            return index;\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {boolean}\n         */\n        self.hasTerminalBlockContainer = function hasTerminalBlockContainer(klass) {\n            return getBlockContainers(klass, true).length > 0;\n        };\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {*}\n         */\n        self.getIndexForPage = function getIndexForPage(klass, pageNumber) {\n            if (!self.hasTerminalBlockContainer(klass)) {\n                return pageNumber % getCount(klass);\n            }\n\n            return getIndexForTerminalBlockContainer(klass, pageNumber);\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            switch (klass) {\n                case headerClass:\n                case footerClass:\n                    return function (i) {\n                        var $blockContainer = getBlockContainers(klass).eq(i),\n\n                            isTerminal = $blockContainer.hasClass(terminalClass),\n                            $blocks = $blockContainer.find(toClassSelector(pageBlockClass));\n\n                        return isTerminal ?\n                            $blocks.addClass(terminalClass) :\n                            $blocks.removeClass(terminalClass);\n                    };\n                default:\n                    break;\n            }\n\n            return getBlockContainers(klass).find(toClassSelector(pageBlockClass));\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*|{}}\n         */\n        self.getOrderedBlocks = function getOrderedBlocks(klass) {\n            return getBlockContainers(klass).find('[' + orderDataAttrName + ']');\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the view of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorView(opts) {\n        var self = this;\n\n        self.paginator = null;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(viewClass);\n        }\n\n        /**\n         *\n         * @param page\n         * @param i\n         */\n        function addToPageList(page, i) {\n            if (isNaN(i) || i === null) {\n                self.paginator.pages.push(page);\n                return;\n            }\n\n            self.paginator.pages.splice(i, 0, page);\n        }\n\n        /**\n         *\n         * @returns {Number}\n         */\n        self.getPageCount = function getPageCount() {\n            return self.paginator.pages.length;\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {XMLList}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            return self.$el\n                .find(toClassSelector(klass))\n                .children(toClassSelector(marginClass))\n                .children();\n        };\n\n        /**\n         *\n         * @param page\n         * @param i\n         * @returns {*}\n         */\n        self.addPage = function addPage(page, i) {\n            addToPageList(page, i);\n            page.mountTo(self.paginator);\n            return page;\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            self.paginator = parent;\n            self.paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the paginator.\n     * @param {object} opts The options of the paginator.\n     * @constructor\n     */\n    function Paginator(opts) {\n        var self = this,\n            modelObserver = new MutationObserver(commitMutations),\n            pub,\n            isObserving = false;\n\n        opts = new PaginatorOptions(opts);\n\n        /**\n         *\n         * @type {PaginatorModel}\n         */\n        self.model = new PaginatorModel(opts);\n\n        /**\n         *\n         * @type {PaginatorView}\n         */\n        self.view = new PaginatorView(opts);\n\n        /**\n         *\n         * @type {PaginatorRenderer}\n         */\n        self.renderer = new PaginatorRenderer(opts);\n\n        /**\n         *\n         * @type {Array}\n         */\n        self.pages = self.pages || [];\n\n        /**\n         *\n         */\n        function render() {\n            self.renderer.render();\n        }\n\n        function commitMutations() {\n            render();\n        }\n\n        /**\n         *\n         * @param $el\n         */\n        function bindToElement($el) {\n            if (!!self.$el) {\n                self.$el.removeClass(componentClass);\n            }\n            self.$el = $el;\n            if (self.$el.hasClass(componentClass)) {\n                return;\n            }\n            self.$el\n                .addClass(componentClass)\n                .removeClass(unpaginatedClass);\n        }\n\n        /**\n         *\n         */\n        function createModel() {\n            var $modelChildren;\n\n            self.model.mountTo(self);\n\n            $modelChildren = self\n                .$el\n                .find(\n                //.findShallow(\n                    [\n                        toClassSelector(headerClass),\n                        toClassSelector(contentClass),\n                        toClassSelector(footerClass)\n                    ]\n                        .join(',')\n                );\n\n            self.model.$watch.append($modelChildren);\n        }\n\n        /**\n         *\n         */\n        function createView() {\n            self.view.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        function createRenderer() {\n            self.renderer.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        self.detachObserver = function detachObserver() {\n            modelObserver.disconnect();\n        };\n\n        /**\n         *\n         */\n        self.observeModel = function observeModel() {\n            modelObserver\n                .observe(self.model.$watch[0], {\n                    childList: true,\n                    attributes: true,\n                    characterData: true,\n                    subtree: true\n                });\n            isObserving = true;\n        };\n\n        pub = {\n            observe: function doObserve() {\n                if (!isObserving) {\n                    return;\n                }\n                self.observeModel();\n            },\n            refresh: function doRender() {\n                render();\n            }\n        };\n\n        /**\n         *\n         * @param $el\n         */\n        self.bindTo = function bindTo($el) {\n            bindToElement($el);\n            createModel();\n            createView();\n            createRenderer();\n            self.observeModel();\n            $el.data('paginator', pub);\n            return pub;\n        };\n    }\n\n    $.fn.paginate = function paginate(opts) {\n        return new Paginator(opts).bindTo(this);\n    };\n})();\n"]}