{"version":3,"sources":["paginator.js"],"names":["toClassSelector","classString","split","filter","string","trim","length","join","PaginatorOptions","rawOpts","PaginatorPageContent","klass","opts","createElement","self","$el","$","addClass","$margin","marginClass","append","page","this","clear","html","mountTo","parent","getBlocks","children","PaginatorPage","pageClass","header","content","footer","getContentHeight","$header","find","headerClass","$footer","footerClass","topHeight","Math","max","height","parseInt","css","bottomHeight","getContentLowerBoundary","paginator","contentClass","hasBreaks","getOverflowBlocks","isBlank","$block","position","top","unmount","remove","view","PaginatorRenderer","writePageComponents","pages","forEach","i","writeToBlockContainer","blocks","blockContainerIndex","model","getIndexForPage","isClone","each","$blockParent","$renderedBlock","clone","parents","pageDeletedClass","blockParentClass","attr","orderDataAttrName","data","parentDataAttrName","removeClass","pageBlockClass","pageAddedClass","firstPage","setOrder","checkDeletedBlocks","isParentDeleted","hasClass","insertPageForContent","newPage","slice","pageIndex","addPage","getFirstPageWithBreak","pageToBreak","performPageBreaks","removeBlankPages","pagesToDelete","push","reverse","pageNumber","splice","renderContent","hasPerformedPageBreaks","isRendering","setTimeout","render","PaginatorModel","modelClass","$watch","watchClass","getBlockContainers","isTerminal","terminalClass","getCount","getIndexForTerminalBlockContainer","j","hasHeaderTerminalClass","hasFooterTerminalClass","$currBlockContainer","eq","next","getPageCount","hasTerminalBlockContainer","$blockContainer","$blocks","getOrderedBlocks","PaginatorView","viewClass","addToPageList","isNaN","Paginator","renderer","bindToElement","componentClass","unpaginatedClass","createModel","createView","createRenderer","observeModel","modelObserver","observe","childList","attributes","characterData","subtree","pub","MutationObserver","refresh","bindTo","fn","paginate"],"mappings":"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","file":"jquery-paginator.min.js","sourcesContent":["(function () {\n    var componentClass = 'paginator-component',\n        unpaginatedClass = 'paginator-unpaginated',\n        modelClass = 'model',\n        viewClass = 'view',\n        watchClass = 'watch',\n        pageClass = 'page',\n        pageBlockClass = 'page-block',\n        pageAddedClass = 'page-added',\n        pageDeletedClass = 'page-deleted',\n        contentClass = 'content',\n        headerClass = 'header',\n        footerClass = 'footer',\n        marginClass = 'margin',\n        parentDataAttrName = 'parent',\n        terminalClass = '-terminal',\n        blockParentClass = 'block-parent',\n        orderDataAttrName = 'data-order';\n\n    /**\n     * Converts a class string to a CSS selector.\n     * @param {string} classString The class string.\n     * @returns {string} The selector string.\n     */\n    function toClassSelector(classString) {\n        return '.' + classString.split(' ').filter(function (string) { return string.trim().length > 0 }).join('.');\n    }\n\n    /**\n     * Class for the options for the paginator.\n     * @param {object} rawOpts The raw options data.\n     * @constructor\n     */\n    function PaginatorOptions(rawOpts) {\n        return rawOpts;\n    }\n\n    /**\n     * Class for the container of contents on a page.\n     * @param {string} klass The class name of the main HTML element generated by the component.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPageContent(klass, opts) {\n        var self = this,\n            page;\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(klass);\n            self.$margin = self.$margin = $('<div>').addClass(marginClass);\n\n            self.$el.append(self.$margin);\n        }\n\n        /**\n         * Appends a content to this component.\n         * @param {jQuery} $el The element to append.\n         */\n        self.append = function append($el) {\n            self.$margin.append($el);\n        };\n\n        /**\n         *\n         */\n        self.clear = function clear() {\n            self.$margin.html('');\n        };\n\n        /**\n         * Mounts this component to a parent component.\n         * @param {object} parent The parent component.\n         */\n        self.mountTo = function mountTo(parent) {\n            if (page === parent) {\n                return;\n            }\n\n            page = parent;\n            page.$el.append(self.$el);\n        };\n\n        /**\n         * Gets the content blocks of this component.\n         * @returns {jQuery} The content blocks of this component.\n         */\n        self.getBlocks = function getBlocks() {\n            return self.$margin.children();\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the page that is to be rendered in the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPage(opts) {\n        var self = this,\n            paginator;\n\n        self.header = new PaginatorPageContent(headerClass, opts);\n        self.content = new PaginatorPageContent(contentClass, opts);\n        self.footer = new PaginatorPageContent(footerClass, opts);\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(pageClass);\n            self.$el\n                .append(self.header.$el)\n                .append(self.content.$el)\n                .append(self.footer.$el);\n        }\n\n        /**\n         * Gets the content height of the page.\n         * @returns {number} The content height of the page.\n         */\n        function getContentHeight() {\n            var $header = self.$el.find(toClassSelector(headerClass)),\n                $footer = self.$el.find(toClassSelector(footerClass)),\n                $margin = self.content.$margin,\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top'))),\n                bottomHeight = Math.max($footer.length > 0 ? $footer.height() : 0, parseInt($margin.css('margin-bottom')));\n\n            return self.$el.height() - topHeight - bottomHeight;\n        }\n\n        function getPageIndex() {\n            var pageIndex = -1;\n\n            paginator.pages.forEach(function (page, i) {\n                if (page !== self) {\n                    return;\n                }\n\n                pageIndex = i;\n            });\n\n            return pageIndex;\n        }\n\n        /**\n         * Gets the lower boundary of the page.\n         * @returns {number} The lower boundary of the page.\n         */\n        function getContentLowerBoundary() {\n            return parseInt(self.content.$el.css('margin-top')) + getContentHeight();\n        }\n\n        /**\n         * Determines if the page has elements that can trigger page breaks.\n         * @returns {boolean}\n         */\n        self.hasBreaks = function hasBreaks() {\n            return self.getOverflowBlocks().length > 0;\n        };\n\n        self.isBlank = function isBlank() {\n            return self.content.$margin.children().length < 1;\n        };\n\n        /**\n         * Gets the elements that overflow the content area of the page.\n         * @returns {jQuery} The elements.\n         */\n        self.getOverflowBlocks = function getOverflowBlocks() {\n            return self.content.getBlocks()\n                .filter(function () {\n                    var $block = $(this),\n                        position = $block.position().top,\n                        height = $block.height();\n\n                    return position + height > getContentLowerBoundary();\n                });\n        };\n\n        self.unmount = function unmount() {\n            self.$el.remove();\n        };\n\n        /**\n         * Mounts the component to a parent.\n         * @param {object} parent The component\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.view.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the renderer of the paginator.\n     * @param {PaginatorOptions} opts\n     * @constructor\n     */\n    function PaginatorRenderer(opts) {\n        var self = this,\n            model,\n            view,\n            paginator,\n            firstPage = new PaginatorPage(opts),\n            isRendering = false;\n\n        /**\n         * Writes the appropriate headers and the footers of the page.\n         */\n        function writePageComponents() {\n            paginator.pages.forEach(function (page, i) {\n                writeToBlockContainer(headerClass, page, i);\n                writeToBlockContainer(footerClass, page, i);\n            });\n        }\n\n        /**\n         * Writes the content of the page.\n         */\n        function writeToBlockContainer(klass, page, i) {\n            var blockContainerIndex = model.getIndexForPage(klass, i),\n                blocks,\n                isClone = false;\n\n            // TODO refactor this part of the code.\n\n            switch (klass) {\n                case footerClass:\n                    page.footer.clear();\n                    blocks = model.getBlocks(klass)(blockContainerIndex);\n                    isClone = true;\n                    break;\n                case headerClass:\n                    page.header.clear();\n                    blocks = model.getBlocks(klass)(blockContainerIndex);\n                    isClone = true;\n                    break;\n                default:\n                    blocks = model.getBlocks(klass);\n                    break;\n            }\n\n            blocks\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent,\n                        $renderedBlock = $block;\n\n                    if (isClone) {\n                        $renderedBlock = $block.clone(true, true);\n                    }\n\n                    if ($block.parents(toClassSelector(pageDeletedClass)).length > 0) {\n                        return;\n                    }\n\n                    $blockParent = $block.parent();\n\n                    $blockParent\n                        .addClass(blockParentClass)\n                        .attr(orderDataAttrName, 0);\n\n                    $renderedBlock\n                        .data(parentDataAttrName, $blockParent)\n                        .removeClass(pageBlockClass)\n                        .addClass(pageAddedClass);\n\n                    switch (klass) {\n                        case headerClass:\n                            page.header.append($renderedBlock);\n                            return;\n                        case footerClass:\n                            page.footer.append($renderedBlock);\n                            return;\n                        default:\n                            break;\n                    }\n\n                    firstPage.content.append($renderedBlock);\n                });\n\n            switch (klass) {\n                case headerClass:\n                    page.content.$margin.css('margin-top', page.$el.find(toClassSelector(klass)).height());\n                    break;\n                case footerClass:\n                    page.content.$margin.css('margin-bottom', page.$el.find(toClassSelector(klass)).height());\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Sets the ordering of each block rendered in the view.\n         */\n        function setOrder() {\n            model\n                .getBlocks('content')\n                .each(function (i) {\n                    $(this).attr(orderDataAttrName, i);\n                });\n        }\n\n        /**\n         * Checks the view for deleted blocks and performs the appropriate actions.\n         */\n        function checkDeletedBlocks() {\n            view\n                .getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent,\n                        isParentDeleted;\n\n                    $blockParent = $block.data(parentDataAttrName);\n\n                    isParentDeleted = !$blockParent ||\n                            $blockParent.hasClass(pageDeletedClass) ||\n                            $blockParent.parents(toClassSelector(pageDeletedClass)).length > 0;\n\n                    if (!isParentDeleted) {\n                        return;\n                    }\n\n                    $block.remove();\n                });\n        }\n\n        /**\n         * Inserts a page for new content.\n         * @param {{blocks:jQuery,pageIndex:number}} content The content.\n         */\n        function insertPageForContent(content) {\n            var newPage = new PaginatorPage(opts);\n\n            content.blocks.each(function () {\n                newPage.content.append($(this));\n            });\n\n            paginator.pages.slice(content.pageIndex + 1).forEach(function (page) {\n                newPage.content.append(page.content.getBlocks());\n            });\n\n            view.addPage(newPage);\n        }\n\n        /**\n         * Gets the content of the first page that has a break.\n         * @returns {{blocks:jQuery,pageIndex:number}} The content to insert.\n         */\n        function getFirstPageWithBreak() {\n            var pageToBreak = null;\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.hasBreaks() || pageToBreak !== null) {\n                    return;\n                }\n\n                // Get the first page to have page breaks.\n                pageToBreak = {\n                    pageIndex: i,\n                    blocks: page.getOverflowBlocks()\n                };\n            });\n\n            return pageToBreak;\n        }\n\n        /**\n         * Performs page breaks among the view's pages.\n         * @returns {boolean} A value that determines if the renderer performed page breaks, which is used to repeat this method.\n         */\n        function performPageBreaks() {\n            var pageToBreak = getFirstPageWithBreak();\n\n            if (pageToBreak === null) {\n                return false;\n            }\n\n            insertPageForContent(pageToBreak);\n            return true;\n        }\n\n        function removeBlankPages() {\n            var pagesToDelete = [];\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.isBlank()) {\n                    return;\n                }\n                pagesToDelete.push(i);\n            });\n\n            pagesToDelete\n                .reverse()\n                .forEach(function (pageNumber) {\n                    paginator.pages[pageNumber].unmount();\n                    paginator.pages.splice(pageNumber, 1);\n                });\n        }\n\n        /**\n         * Renders the content.\n         */\n        function renderContent() {\n            var hasPerformedPageBreaks;\n            if (isRendering) {\n                return;\n            }\n\n            isRendering = true;\n            checkDeletedBlocks();\n            removeBlankPages();\n            writeToBlockContainer(contentClass);\n            setOrder();\n            do {\n                hasPerformedPageBreaks = performPageBreaks();\n                writePageComponents();\n            } while (hasPerformedPageBreaks);\n\n            setTimeout(function () {\n                isRendering = false;\n            });\n        }\n\n        /**\n         *\n         */\n        self.render = function render() {\n            if (paginator.pages.length < 1) {\n                view.addPage(firstPage);\n            }\n\n            renderContent();\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            paginator = parent;\n            model = paginator.model;\n            view = paginator.view;\n\n            self.render();\n        };\n    }\n\n    /**\n     * Class for the model of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorModel(opts) {\n        var self = this,\n            paginator;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(modelClass);\n            if (!!self.$watch) {\n                return;\n            }\n            self.$watch = self.$watch || $('<div>').addClass(watchClass);\n            self.$el.append(self.$watch);\n        }\n\n        /**\n         *\n         * @param klass\n         * @param isTerminal\n         * @returns {*}\n         */\n        function getBlockContainers(klass, isTerminal) {\n            return self.$watch.children(toClassSelector(!!isTerminal ? klass + ' ' + terminalClass : klass));\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        function getCount(klass) {\n            return getBlockContainers(klass).length;\n        }\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {number|*}\n         */\n        function getIndexForTerminalBlockContainer(klass, pageNumber) {\n            var $currBlockContainer = getBlockContainers(klass).eq(0),\n                i, j, hasHeaderTerminalClass, hasFooterTerminalClass;\n\n            for (\n                i = 0,\n                j = 0;\n\n                i < paginator.pages.length;\n\n                i++,\n                j = (j + 1) % getCount(headerClass),\n                $currBlockContainer = $currBlockContainer.next()\n            ) {\n                if (!$currBlockContainer) {\n                    $currBlockContainer = getBlockContainers(klass).eq(0);\n                }\n\n                hasHeaderTerminalClass = klass === headerClass && $currBlockContainer.hasClass(terminalClass);\n                hasFooterTerminalClass = klass === footerClass && $currBlockContainer.hasClass(terminalClass);\n\n                if (hasHeaderTerminalClass && pageNumber > 0 ||\n                    hasFooterTerminalClass && pageNumber < paginator.view.getPageCount() - 1) {\n                    ++j;\n                }\n\n                if (i === pageNumber ||\n                    hasHeaderTerminalClass && pageNumber === 0 ||\n                    hasFooterTerminalClass && pageNumber === paginator.view.getPageCount() - 1) {\n                    return j;\n                }\n            }\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {boolean}\n         */\n        self.hasTerminalBlockContainer = function hasTerminalBlockContainer(klass) {\n            return getBlockContainers(klass, true).length > 0;\n        };\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {*}\n         */\n        self.getIndexForPage = function getIndexForPage(klass, pageNumber) {\n            if (!self.hasTerminalBlockContainer(klass)) {\n                return pageNumber % getCount(klass);\n            }\n\n            return getIndexForTerminalBlockContainer(klass, pageNumber);\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            switch (klass) {\n                case headerClass:\n                case footerClass:\n                    return function (i) {\n                        var $blockContainer = getBlockContainers(klass).eq(i),\n\n                            isTerminal = $blockContainer.hasClass(terminalClass),\n                            $blocks = $blockContainer.find(toClassSelector(pageBlockClass));\n\n                        return isTerminal ?\n                            $blocks.addClass(terminalClass) :\n                            $blocks.removeClass(terminalClass);\n                    };\n                default:\n                    break;\n            }\n\n            return getBlockContainers(klass).find(toClassSelector(pageBlockClass));\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*|{}}\n         */\n        self.getOrderedBlocks = function getOrderedBlocks(klass) {\n            return getBlockContainers(klass).find('[' + orderDataAttrName + ']');\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the view of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorView(opts) {\n        var self = this;\n\n        self.paginator = null;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(viewClass);\n        }\n\n        /**\n         *\n         * @param page\n         * @param i\n         */\n        function addToPageList(page, i) {\n            if (isNaN(i) || i === null) {\n                self.paginator.pages.push(page);\n                return;\n            }\n\n            self.paginator.pages.splice(i, 0, page);\n        }\n\n        /**\n         *\n         * @returns {Number}\n         */\n        self.getPageCount = function getPageCount() {\n            return self.paginator.pages.length;\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {XMLList}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            return self.$el\n                .find(toClassSelector(klass))\n                .children(toClassSelector(marginClass))\n                .children();\n        };\n\n        /**\n         *\n         * @param page\n         * @param i\n         * @returns {*}\n         */\n        self.addPage = function addPage(page, i) {\n            addToPageList(page, i);\n            page.mountTo(self.paginator);\n            return page;\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            self.paginator = parent;\n            self.paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the paginator.\n     * @param {object} opts The options of the paginator.\n     * @constructor\n     */\n    function Paginator(opts) {\n        var self = this,\n            modelObserver,\n            pub;\n\n        opts = new PaginatorOptions(opts);\n\n        modelObserver = new MutationObserver(render);\n\n        /**\n         *\n         * @type {PaginatorModel}\n         */\n        self.model = new PaginatorModel(opts);\n\n        /**\n         *\n         * @type {PaginatorView}\n         */\n        self.view = new PaginatorView(opts);\n\n        /**\n         *\n         * @type {PaginatorRenderer}\n         */\n        self.renderer = new PaginatorRenderer(opts);\n\n        /**\n         *\n         * @type {Array}\n         */\n        self.pages = self.pages || [];\n\n        /**\n         *\n         */\n        function render() {\n            self.renderer.render();\n        }\n\n        /**\n         *\n         * @param $el\n         */\n        function bindToElement($el) {\n            if (!!self.$el) {\n                self.$el.removeClass(componentClass);\n            }\n            self.$el = $el;\n            if (self.$el.hasClass(componentClass)) {\n                return;\n            }\n            self.$el\n                .addClass(componentClass)\n                .removeClass(unpaginatedClass);\n        }\n\n        /**\n         *\n         */\n        function createModel() {\n            self.model.mountTo(self);\n\n            self.model.$watch.append(\n                self\n                    .$el\n                    .children()\n                    .filter(function () {\n                        var $el = $(this);\n\n                        return !(\n                            $el.hasClass(modelClass) ||\n                            $el.hasClass(viewClass) ||\n                            $el.hasClass(watchClass)\n                        );\n                    })\n            );\n        }\n\n        /**\n         *\n         */\n        function createView() {\n            self.view.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        function createRenderer() {\n            self.renderer.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        function observeModel() {\n            modelObserver\n                .observe(self.model.$watch[0], {\n                    childList: true,\n                    attributes: true,\n                    characterData: true,\n                    subtree: true\n                });\n        }\n\n        pub = {\n            refresh: function doRender() {\n                render();\n            }\n        };\n\n        /**\n         *\n         * @param $el\n         */\n        self.bindTo = function bindTo($el) {\n            bindToElement($el);\n            createModel();\n            createView();\n            createRenderer();\n            observeModel();\n            $el.data('paginator', pub);\n        };\n    }\n\n    $.fn.paginate = function paginate(opts) {\n        new Paginator(opts).bindTo(this);\n    };\n})();\n"]}