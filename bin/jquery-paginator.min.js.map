{"version":3,"sources":["paginator.js"],"names":["Page","$paginator","pageNumber","conditionallyAppendHeader","$header","$margin","headerIndex","$headers","find","headerCount","length","eq","clone","hasClass","$","addClass","children","each","append","this","$page","prepend","setTimeout","$content","css","height","conditionallyAppendFooter","$footer","footerIndex","$footers","footerCount","console","log","data","getContentHeight","topHeight","Math","max","parseInt","bottomHeight","needsBreaking","setPageNumber","remove","fn","paginate","toClassSelector","classString","split","filter","string","trim","join","layoutContent","$model","pageBlockClass","$modelParent","parent","parents","pageDeletedClass","attr","removeClass","pageAddedClass","$modelParents","push","$pages","i","$view","orderContent","analyzePageBreaks","getPagesWithBreaks","pagesWithBreaks","forEach","contentHeight","pageHasBreaks","$this","position","top","pageContentLowerBoundary","splitContent","pageNumbers","toNextPage","pageMargin","unshift","shift","showAllPages","removeAttr","hideBlankPages","resetPageNumber","trigger","lastPageNumber","doRender","Error","onWatchChange","$modelWatch","modelObserver","MutationObserver","observe","childList","attributes","characterData","subtree"],"mappings":"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","file":"jquery-paginator.min.js","sourcesContent":["(function () {\n    var Page = function Page($paginator, pageNumber) {\n        var $page = $('<div>'),\n            $content = $('<div>'),\n            $margin = $('<div>');\n\n        $margin.addClass('margin');\n\n        pageNumber = pageNumber || $paginator.data('lastPageNumber');\n\n        $content\n            .addClass('content')\n            .append($margin);\n\n        function conditionallyAppendHeader() {\n            var $headers = $paginator.find('.model').find('.header'),\n                $header,\n                $margin,\n                headerIndex,\n                headerCount = $headers.length;\n\n            if (headerCount < 1) {\n                return;\n            }\n\n            headerIndex = pageNumber % headerCount;\n            $header = $headers.eq(headerIndex).clone(true, true);\n\n            if ($header.hasClass('terminal') && pageNumber > 0) {\n                return;\n            }\n\n            $margin = $('<div>');\n            $margin.addClass('margin');\n            $header.children().each(function () {\n                $margin.append(this);\n            });\n            $header.append($margin);\n            $page.prepend($header);\n            setTimeout(function () {\n                $content.css('margin-top', $header.height());\n            });\n        }\n\n        function conditionallyAppendFooter() {\n            var $footers = $paginator.find('.model').find('.footer'),\n                $footer,\n                footerIndex,\n                footerCount = $footers.length,\n                $margin;\n\n            if (footerCount < 1) {\n                return;\n            }\n\n            footerIndex = pageNumber % footerCount;\n            $footer = $footers.eq(footerIndex).clone(true, true);\n\n            console.log($footer.hasClass('terminal'), pageNumber, $paginator.data('lastPageNumber'));\n\n            if ($footer.hasClass('terminal') && pageNumber < $paginator.data('lastPageNumber') - 1) {\n                return;\n            }\n\n            $margin = $('<div>');\n            $margin.addClass('margin');\n            $footer.children().each(function () {\n                $margin.append(this);\n            });\n\n            $footer\n                .append($margin);\n\n            $page\n                .append($footer);\n\n            setTimeout(function () {\n                $content.css('margin-bottom', $footer.height());\n            });\n        }\n\n        $page.getContentHeight = function getContentHeight() {\n            var $header = this.find('.header'),\n                $footer = this.find('.footer'),\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top'))),\n                bottomHeight = Math.max($footer.length > 0 ? $footer.height() : 0, parseInt($margin.css('margin-top')));\n\n            console.log(this, this.height());\n\n            return this.height() - topHeight - bottomHeight;\n        };\n\n        $page.needsBreaking = function needsBreaking() {\n            return $content.height() > this.getContentHeight();\n        };\n\n        $page.setPageNumber = function setPageNumber(pageNumber) {\n            this.data('pageNumber', pageNumber);\n\n            this.find('.header').remove();\n            this.find('.footer').remove();\n\n            conditionallyAppendHeader();\n            conditionallyAppendFooter();\n        };\n\n        $page\n            .addClass('page')\n            .append($content);\n\n        $page.setPageNumber(pageNumber);\n\n        return $page;\n    };\n\n    $.fn.paginate = function Paginator() {\n        var $paginator = this,\n            $model = $('<div>'),\n            $modelWatch = $('<div>'),\n            $view = $('<div>'),\n            modelObserver = new MutationObserver(onWatchChange),\n            lastPageNumber = 0,\n            $pages = [],\n            pageBlockClass = 'page-block',\n            pageAddedClass = 'page-added',\n            pageDeletedClass = 'page-deleted',\n            $modelParents = [];\n\n        function toClassSelector(classString) {\n            return '.' + classString.split(' ').filter(function (string) { return string.trim().length > 0 }).join('.');\n        }\n\n        function layoutContent() {\n            $model\n                .find(toClassSelector(pageBlockClass))\n                .each(function () {\n                    var $content = $(this),\n                        $modelParent = $content.parent();\n\n                    if ($content.parents(toClassSelector(pageDeletedClass)).length > 0) {\n                        return;\n                    }\n\n                    $modelParent.attr('data-order', 0);\n                    $content\n                        .data('$modelParent', $modelParent)\n                        .removeClass(pageBlockClass)\n                        .addClass(pageAddedClass);\n                    $modelParents.push($modelParent);\n                    $pages[0].find('.content').find('.margin').append($content);\n                });\n\n            $model\n                .find('[data-order]')\n                .each(function (i) {\n                    $(this).attr('data-order', i);\n                });\n\n            $view\n                .find('.content')\n                .find('.margin')\n                .children()\n                .each(function () {\n                    var $content = $(this),\n                        $modelParent = $content.data('$modelParent');\n\n                    if (!($modelParent.hasClass(pageDeletedClass) ||\n                        $modelParent.parents().length < 1 ||\n                        $modelParent.parents(toClassSelector(pageDeletedClass)).length > 0)) {\n                        if ($content.css('float') === 'none') {\n                            $content.attr('data-order', $modelParent.attr('data-order'));\n                        }\n                        return;\n                    }\n\n                    $content.remove();\n                });\n        }\n\n        function orderContent() {\n\n        }\n\n        function analyzePageBreaks() {\n            var pagesWithBreaks;\n\n            function getPagesWithBreaks() {\n                var pagesWithBreaks = [];\n\n                $pages.forEach(function ($page, i) {\n                    var contentHeight = $page.getContentHeight(),\n                        pageHasBreaks = false;\n\n                    $page.find('.content').find('.margin').children().each(function () {\n                        var $this = $(this),\n                            position = $this.position().top,\n                            height = $this.height(),\n                            pageContentLowerBoundary = parseInt($page.find('.content').css('margin-top')) + contentHeight;\n\n                        console.log($this, position + height, pageContentLowerBoundary, contentHeight);\n\n                        pageHasBreaks = pageHasBreaks || position + height > pageContentLowerBoundary;\n                    });\n\n                    if (!pageHasBreaks) {\n                        $page.removeClass('-overflow');\n                        return;\n                    }\n\n                    $page.addClass('-overflow');\n                    pagesWithBreaks.push(i);\n                });\n\n                return pagesWithBreaks;\n            }\n\n            function splitContent(pageNumbers) {\n                pageNumbers.forEach(function (pageNumber) {\n                    var toNextPage = [],\n                        $page = $pages[pageNumber],\n                        contentHeight = $page.getContentHeight();\n\n                    $page.find('.content').find('.margin').children().each(function () {\n                        var $this = $(this),\n                            position = $this.position().top,\n                            height = $this.height(),\n                            pageMargin = parseInt($page.find('.content').css('margin-top')),\n                            pageContentLowerBoundary = pageMargin + contentHeight;\n\n                        if (position + height > pageContentLowerBoundary) {\n                            toNextPage.unshift(this);\n                        }\n                    });\n\n                    while (toNextPage.length > 0) {\n                        if (!$pages[ pageNumber + 1 ]) {\n                            $view.append(\n                                $pages[ pageNumber + 1 ] = new Page($paginator, pageNumber + 1)\n                            );\n                        }\n                        $pages[ pageNumber + 1 ].find('.content').find('.margin').prepend(toNextPage.shift());\n                        $paginator.data('lastPageNumber', pageNumber + 1);\n                    }\n                });\n            }\n\n            do {\n                splitContent(pagesWithBreaks = getPagesWithBreaks());\n                console.log(pagesWithBreaks);\n            } while (pagesWithBreaks.length > 0);\n        }\n\n        function showAllPages() {\n            $pages.forEach(function ($page, i) {\n                $page\n                    .removeAttr('hidden')\n                    .setPageNumber(i);\n            });\n        }\n\n        function hideBlankPages() {\n            $pages.forEach(function ($page, i) {\n                if ($page.find('.content').find('.margin').children().length > 0 || i < 1) {\n                    return;\n                }\n                $page.attr('hidden', '');\n            });\n        }\n\n        function resetPageNumber() {\n            $paginator.trigger('paginator.pagenumberchange', { lastPageNumber: lastPageNumber });\n            $paginator.data('lastPageNumber', $view.find('.page').length);\n        }\n\n        function doRender() {\n            $paginator.data('_isRendering', true);\n            resetPageNumber();\n            if (!$pages[lastPageNumber]) {\n                $view.append(\n                    $pages[lastPageNumber] = new Page($paginator, lastPageNumber)\n                );\n\n                if ($view.find('.page').css('height') === 'auto') {\n                    throw new Error('Page dimensions should be explicitly set up! Either you have not included the default style or pages\\' dimensions have been set to auto.');\n                }\n            }\n            showAllPages();\n            layoutContent();\n            orderContent();\n            analyzePageBreaks();\n            hideBlankPages();\n            setTimeout(function () {\n                $paginator.data('_isRendering', false);\n            });\n        }\n\n        function onWatchChange() {\n            if (!!$paginator.data('_isRendering')) {\n                return;\n            }\n\n            setTimeout(function () {\n                doRender();\n                setTimeout(function () {\n                    $paginator.trigger('paginator.modelchange', {});\n                });\n            });\n        }\n\n        $modelWatch\n            .addClass('watch')\n            .append($paginator.children());\n\n        modelObserver\n            .observe($modelWatch[0], {\n                childList: true,\n                attributes: true,\n                characterData: true,\n                subtree: true\n            });\n\n        $model\n            .addClass('model')\n            .append($modelWatch);\n\n        $view\n            .addClass('view')\n            .append($pages[0]);\n\n        $paginator\n            .addClass('paginator-component')\n            .append($model)\n            .append($view);\n\n        setTimeout(function () {\n            doRender();\n        });\n    };\n})();\n"]}