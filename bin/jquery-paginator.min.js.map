{"version":3,"sources":["paginator.js"],"names":["toClassSelector","classString","split","filter","string","trim","length","join","PaginatorOptions","rawOpts","PaginatorPageContent","klass","opts","createElement","self","$el","$","addClass","$margin","marginClass","append","page","this","clear","html","mountTo","parent","getBlocks","children","PaginatorPage","pageClass","header","content","footer","getContentHeight","$header","find","headerClass","$footer","footerClass","topHeight","Math","max","height","parseInt","css","bottomHeight","getContentLowerBoundary","paginator","contentClass","hasBreaks","getOverflowBlocks","isBlank","$block","position","top","unmount","remove","view","PaginatorRenderer","writePageComponents","pages","forEach","i","writeToBlockContainer","blocks","blockContainerIndex","model","getIndexForPage","isClone","each","$renderedBlock","clone","parents","pageDeletedClass","$blockParent","blockParentClass","attr","orderDataAttrName","data","parentDataAttrName","removeClass","pageBlockClass","pageAddedClass","firstPage","setOrder","checkDeletedBlocks","isParentDeleted","hasClass","is","insertPageForContent","newPage","slice","pageIndex","addPage","getFirstPageWithBreak","pageToBreak","performPageBreaks","removeBlankPages","pagesToDelete","push","reverse","pageNumber","splice","orderContent","sortElements","block1","block2","order1","order2","isRendering","render","detachObserver","hasPerformedPageBreaks","setTimeout","observeModel","PaginatorModel","modelClass","$watch","watchClass","getBlockContainers","isTerminal","terminalClass","getCount","getIndexForTerminalBlockContainer","j","hasHeaderTerminalClass","hasFooterTerminalClass","$currBlockContainer","eq","next","getPageCount","hasTerminalBlockContainer","$blockContainer","$blocks","getOrderedBlocks","PaginatorView","viewClass","addToPageList","isNaN","Paginator","renderer","commitMutations","bindToElement","componentClass","unpaginatedClass","createModel","$modelChildren","findShallow","createView","createRenderer","pub","modelObserver","MutationObserver","isObserving","disconnect","observe","childList","attributes","characterData","subtree","refresh","bindTo","jQuery","fn","sel","root","matching","first","sort","comparator","getSortable","placements","map","sortElement","call","parentNode","nextSibling","insertBefore","document","createTextNode","Error","removeChild","paginate"],"mappings":"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","file":"jquery-paginator.min.js","sourcesContent":["(function () {\n    var componentClass = 'paginator-component',\n        unpaginatedClass = 'paginator-unpaginated',\n        modelClass = 'model',\n        viewClass = 'view',\n        watchClass = 'watch',\n        pageClass = 'page',\n        pageBlockClass = 'page-block',\n        pageAddedClass = 'page-added',\n        pageDeletedClass = 'page-deleted',\n        contentClass = 'content',\n        headerClass = 'header',\n        footerClass = 'footer',\n        marginClass = 'margin',\n        parentDataAttrName = 'parent',\n        terminalClass = '-terminal',\n        blockParentClass = 'block-parent',\n        orderDataAttrName = 'data-order';\n\n    // http://stackoverflow.com/questions/7051897/how-can-i-select-the-shallowest-matching-descendant\n    jQuery.fn.findShallow = function(sel) {\n        return (function findShallow(root, sel) {\n            var children = root.children();\n            if (children.length) {\n                var matching = children.filter(sel);\n                if (matching.length) {\n                    return matching.first();\n                }\n                return findShallow(children, sel);\n            }\n            return $();\n        })(this, sel);\n    };\n\n    // http://james.padolsey.com/snippets/sorting-elements-with-jquery/\n    jQuery.fn.sortElements = (function () {\n        var sort = [].sort;\n\n        return function (comparator, getSortable) {\n\n            getSortable = getSortable || function () { return this; };\n\n            var placements = this.map(function () {\n\n                var sortElement = getSortable.call(this),\n                    parentNode = sortElement.parentNode,\n\n                // Since the element itself will change position, we have\n                // to have some way of storing its original position in\n                // the DOM. The easiest way is to have a 'flag' node:\n                    nextSibling = parentNode.insertBefore(\n                        document.createTextNode(''),\n                        sortElement.nextSibling\n                    );\n\n                return function () {\n\n                    if (parentNode === this) {\n                        throw new Error(\n                            \"You can't sort elements if any one is a descendant of another.\"\n                        );\n                    }\n\n                    // Insert before flag:\n                    parentNode.insertBefore(this, nextSibling);\n                    // Remove flag:\n                    parentNode.removeChild(nextSibling);\n\n                };\n\n            });\n\n            return sort.call(this, comparator).each(function (i) {\n                placements[i].call(getSortable.call(this));\n            });\n\n        };\n\n    })();\n\n    /**\n     * Converts a class string to a CSS selector.\n     * @param {string} classString The class string.\n     * @returns {string} The selector string.\n     */\n    function toClassSelector(classString) {\n        return '.' + classString.split(' ').filter(function (string) { return string.trim().length > 0 }).join('.');\n    }\n\n    /**\n     * Class for the options for the paginator.\n     * @param {object} rawOpts The raw options data.\n     * @constructor\n     */\n    function PaginatorOptions(rawOpts) {\n        return rawOpts;\n    }\n\n    /**\n     * Class for the container of contents on a page.\n     * @param {string} klass The class name of the main HTML element generated by the component.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPageContent(klass, opts) {\n        var self = this,\n            page;\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(klass);\n            self.$margin = self.$margin = $('<div>').addClass(marginClass);\n\n            self.$el.append(self.$margin);\n        }\n\n        /**\n         * Appends a content to this component.\n         * @param {jQuery} $el The element to append.\n         */\n        self.append = function append($el) {\n            self.$margin.append($el);\n        };\n\n        /**\n         *\n         */\n        self.clear = function clear() {\n            self.$margin.html('');\n        };\n\n        /**\n         * Mounts this component to a parent component.\n         * @param {object} parent The parent component.\n         */\n        self.mountTo = function mountTo(parent) {\n            if (page === parent) {\n                return;\n            }\n\n            page = parent;\n            page.$el.append(self.$el);\n        };\n\n        /**\n         * Gets the content blocks of this component.\n         * @returns {jQuery} The content blocks of this component.\n         */\n        self.getBlocks = function getBlocks() {\n            return self.$margin.children();\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the page that is to be rendered in the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorPage(opts) {\n        var self = this,\n            paginator;\n\n        self.header = new PaginatorPageContent(headerClass, opts);\n        self.content = new PaginatorPageContent(contentClass, opts);\n        self.footer = new PaginatorPageContent(footerClass, opts);\n\n        /**\n         * Creates the elements of the component.\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(pageClass);\n            self.$el\n                .append(self.header.$el)\n                .append(self.content.$el)\n                .append(self.footer.$el);\n        }\n\n        /**\n         * Gets the content height of the page.\n         * @returns {number} The content height of the page.\n         */\n        function getContentHeight() {\n            var $header = self.$el.find(toClassSelector(headerClass)),\n                $footer = self.$el.find(toClassSelector(footerClass)),\n                $margin = self.content.$margin,\n                topHeight = Math.max($header.length > 0 ? $header.height() : 0, parseInt($margin.css('margin-top'))),\n                bottomHeight = Math.max($footer.length > 0 ? $footer.height() : 0, parseInt($margin.css('margin-bottom')));\n\n            return self.$el.height() - topHeight - bottomHeight;\n        }\n\n        function getPageIndex() {\n            var pageIndex = -1;\n\n            paginator.pages.forEach(function (page, i) {\n                if (page !== self) {\n                    return;\n                }\n\n                pageIndex = i;\n            });\n\n            return pageIndex;\n        }\n\n        /**\n         * Gets the lower boundary of the page.\n         * @returns {number} The lower boundary of the page.\n         */\n        function getContentLowerBoundary() {\n            return parseInt(self.content.$el.css('margin-top')) + getContentHeight();\n        }\n\n        /**\n         * Determines if the page has elements that can trigger page breaks.\n         * @returns {boolean}\n         */\n        self.hasBreaks = function hasBreaks() {\n            return self.getOverflowBlocks().length > 0;\n        };\n\n        self.isBlank = function isBlank() {\n            return self.content.$margin.children().length < 1;\n        };\n\n        /**\n         * Gets the elements that overflow the content area of the page.\n         * @returns {jQuery} The elements.\n         */\n        self.getOverflowBlocks = function getOverflowBlocks() {\n            return self.content.getBlocks()\n                .filter(function () {\n                    var $block = $(this),\n                        position = $block.position().top,\n                        height = $block.height();\n\n                    return position + height > getContentLowerBoundary();\n                });\n        };\n\n        self.unmount = function unmount() {\n            self.$el.remove();\n        };\n\n        /**\n         * Mounts the component to a parent.\n         * @param {object} parent The component\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.view.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the renderer of the paginator.\n     * @param {PaginatorOptions} opts\n     * @constructor\n     */\n    function PaginatorRenderer(opts) {\n        var self = this,\n            model,\n            view,\n            paginator,\n            firstPage = new PaginatorPage(opts),\n            isRendering = false;\n\n        /**\n         * Writes the appropriate headers and the footers of the page.\n         */\n        function writePageComponents() {\n            paginator.pages.forEach(function (page, i) {\n                writeToBlockContainer(headerClass, page, i);\n                writeToBlockContainer(footerClass, page, i);\n            });\n        }\n\n        /**\n         * Writes the content of the page.\n         */\n        function writeToBlockContainer(klass, page, i) {\n            var blockContainerIndex = model.getIndexForPage(klass, i),\n                blocks,\n                isClone = false;\n\n            // TODO refactor this part of the code.\n\n            switch (klass) {\n                case footerClass:\n                    page.footer.clear();\n                    blocks = model.getBlocks(klass)(blockContainerIndex);\n                    isClone = true;\n                    break;\n                case headerClass:\n                    page.header.clear();\n                    blocks = model.getBlocks(klass)(blockContainerIndex);\n                    isClone = true;\n                    break;\n                default:\n                    blocks = model.getBlocks(klass);\n                    break;\n            }\n\n            blocks\n                .each(function () {\n                    var $block = $(this),\n                        $renderedBlock = $block;\n\n                    if (isClone) {\n                        $renderedBlock = $block.clone(true, true);\n                    }\n\n                    if ($block.parents(toClassSelector(pageDeletedClass)).length > 0) {\n                        return;\n                    }\n\n                    $blockParent = $block.parent();\n\n                    $blockParent\n                        .addClass(blockParentClass)\n                        .attr(orderDataAttrName, 0);\n\n                    $renderedBlock\n                        .data(parentDataAttrName, $blockParent)\n                        .removeClass(pageBlockClass)\n                        .addClass(pageAddedClass);\n\n                    switch (klass) {\n                        case headerClass:\n                            page.header.append($renderedBlock);\n                            return;\n                        case footerClass:\n                            page.footer.append($renderedBlock);\n                            return;\n                        default:\n                            break;\n                    }\n\n                    firstPage.content.append($renderedBlock);\n                });\n\n            switch (klass) {\n                case headerClass:\n                    page.content.$margin.css('margin-top', page.$el.find(toClassSelector(klass)).height());\n                    break;\n                case footerClass:\n                    page.content.$margin.css('margin-bottom', page.$el.find(toClassSelector(klass)).height());\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        /**\n         * Sets the ordering of each block rendered in the view.\n         */\n        function setOrder() {\n            model.$el\n                .find(toClassSelector(blockParentClass))\n                .each(function (i) {\n                    $(this).attr(orderDataAttrName, i);\n                });\n\n            view.getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent = $block.data(parentDataAttrName);\n\n                    $block.attr(orderDataAttrName, $blockParent.attr(orderDataAttrName));\n                });\n        }\n\n        /**\n         * Checks the view for deleted blocks and performs the appropriate actions.\n         */\n        function checkDeletedBlocks() {\n            view\n                .getBlocks('content')\n                .each(function () {\n                    var $block = $(this),\n                        $blockParent,\n                        isParentDeleted;\n\n                    $blockParent = $block.data(parentDataAttrName);\n\n                    isParentDeleted = !$blockParent ||\n                            $blockParent.hasClass(pageDeletedClass) ||\n                            $blockParent.parents(toClassSelector(pageDeletedClass)).length > 0 ||\n                            !$blockParent.parents().is('body');\n\n                    if (!isParentDeleted) {\n                        return;\n                    }\n\n                    $block.remove();\n                });\n        }\n\n        /**\n         * Inserts a page for new content.\n         * @param {{blocks:jQuery,pageIndex:number}} content The content.\n         */\n        function insertPageForContent(content) {\n            var newPage = new PaginatorPage(opts);\n\n            content.blocks.each(function () {\n                newPage.content.append($(this));\n            });\n\n            paginator.pages.slice(content.pageIndex + 1).forEach(function (page) {\n                newPage.content.append(page.content.getBlocks());\n            });\n\n            view.addPage(newPage);\n        }\n\n        /**\n         * Gets the content of the first page that has a break.\n         * @returns {{blocks:jQuery,pageIndex:number}} The content to insert.\n         */\n        function getFirstPageWithBreak() {\n            var pageToBreak = null;\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.hasBreaks() || pageToBreak !== null) {\n                    return;\n                }\n\n                // Get the first page to have page breaks.\n                pageToBreak = {\n                    pageIndex: i,\n                    blocks: page.getOverflowBlocks()\n                };\n            });\n\n            return pageToBreak;\n        }\n\n        /**\n         * Performs page breaks among the view's pages.\n         * @returns {boolean} A value that determines if the renderer performed page breaks, which is used to repeat this method.\n         */\n        function performPageBreaks() {\n            var pageToBreak = getFirstPageWithBreak();\n\n            if (pageToBreak === null) {\n                return false;\n            }\n\n            insertPageForContent(pageToBreak);\n            return true;\n        }\n\n        function removeBlankPages() {\n            var pagesToDelete = [];\n\n            paginator.pages.forEach(function (page, i) {\n                if (!page.isBlank()) {\n                    return;\n                }\n                pagesToDelete.push(i);\n            });\n\n            pagesToDelete\n                .reverse()\n                .forEach(function (pageNumber) {\n                    if (paginator.pages.length < 2) {\n                        return;\n                    }\n                    paginator.pages[pageNumber].unmount();\n                    paginator.pages.splice(pageNumber, 1);\n                });\n        }\n\n        function orderContent() {\n            view\n                .$el\n                .find('.content')\n                .find('.margin')\n                .children()\n                .sortElements(function (block1, block2) {\n                    var order1 = parseInt($(block1).attr(orderDataAttrName)),\n                        order2 = parseInt($(block2).attr(orderDataAttrName));\n\n                    return order1 - order2;\n                });\n        }\n\n        /**\n         * Renders the content.\n         */\n        self.render = function render() {\n            paginator.detachObserver();\n            if (paginator.pages.length < 1) {\n                view.addPage(firstPage);\n            }\n\n            var hasPerformedPageBreaks;\n            checkDeletedBlocks();\n            // TODO move elements when extra space has been found on previous pages.\n            writeToBlockContainer(contentClass);\n            setOrder();\n            do {\n                hasPerformedPageBreaks = performPageBreaks();\n                writePageComponents();\n            } while (hasPerformedPageBreaks);\n            removeBlankPages();\n            writePageComponents();\n            orderContent();\n\n            setTimeout(function () {\n                isRendering = false;\n            });\n            paginator.observeModel();\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            paginator = parent;\n            model = paginator.model;\n            view = paginator.view;\n        };\n    }\n\n    /**\n     * Class for the model of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorModel(opts) {\n        var self = this,\n            paginator;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(modelClass);\n            if (!!self.$watch) {\n                return;\n            }\n            self.$watch = self.$watch || $('<div>').addClass(watchClass);\n            self.$el.append(self.$watch);\n        }\n\n        /**\n         *\n         * @param klass\n         * @param isTerminal\n         * @returns {*}\n         */\n        function getBlockContainers(klass, isTerminal) {\n            return self.$watch.find(toClassSelector(!!isTerminal ? klass + ' ' + terminalClass : klass));\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        function getCount(klass) {\n            return getBlockContainers(klass).length;\n        }\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {number|*}\n         */\n        function getIndexForTerminalBlockContainer(klass, pageNumber) {\n            var $currBlockContainer = getBlockContainers(klass).eq(0),\n                i, j, hasHeaderTerminalClass, hasFooterTerminalClass;\n\n            for (\n                i = 0,\n                j = 0;\n\n                i < paginator.pages.length;\n\n                i++,\n                j = (j + 1) % getCount(headerClass),\n                $currBlockContainer = $currBlockContainer.next()\n            ) {\n                if (!$currBlockContainer) {\n                    $currBlockContainer = getBlockContainers(klass).eq(0);\n                }\n\n                hasHeaderTerminalClass = klass === headerClass && $currBlockContainer.hasClass(terminalClass);\n                hasFooterTerminalClass = klass === footerClass && $currBlockContainer.hasClass(terminalClass);\n\n                if (hasHeaderTerminalClass && pageNumber > 0 ||\n                    hasFooterTerminalClass && pageNumber < paginator.view.getPageCount() - 1) {\n                    ++j;\n                }\n\n                if (i === pageNumber ||\n                    hasHeaderTerminalClass && pageNumber === 0 ||\n                    hasFooterTerminalClass && pageNumber === paginator.view.getPageCount() - 1) {\n                    return j;\n                }\n            }\n        }\n\n        /**\n         *\n         * @param klass\n         * @returns {boolean}\n         */\n        self.hasTerminalBlockContainer = function hasTerminalBlockContainer(klass) {\n            return getBlockContainers(klass, true).length > 0;\n        };\n\n        /**\n         *\n         * @param klass\n         * @param pageNumber\n         * @returns {*}\n         */\n        self.getIndexForPage = function getIndexForPage(klass, pageNumber) {\n            if (!self.hasTerminalBlockContainer(klass)) {\n                return pageNumber % getCount(klass);\n            }\n\n            return getIndexForTerminalBlockContainer(klass, pageNumber);\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            switch (klass) {\n                case headerClass:\n                case footerClass:\n                    return function (i) {\n                        var $blockContainer = getBlockContainers(klass).eq(i),\n\n                            isTerminal = $blockContainer.hasClass(terminalClass),\n                            $blocks = $blockContainer.find(toClassSelector(pageBlockClass));\n\n                        return isTerminal ?\n                            $blocks.addClass(terminalClass) :\n                            $blocks.removeClass(terminalClass);\n                    };\n                default:\n                    break;\n            }\n\n            return getBlockContainers(klass).find(toClassSelector(pageBlockClass));\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {*|{}}\n         */\n        self.getOrderedBlocks = function getOrderedBlocks(klass) {\n            return getBlockContainers(klass).find('[' + orderDataAttrName + ']');\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            if (paginator === parent) {\n                return;\n            }\n\n            paginator = parent;\n            paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the view of the paginator.\n     * @param {PaginatorOptions} opts The options of the paginator.\n     * @constructor\n     */\n    function PaginatorView(opts) {\n        var self = this;\n\n        self.paginator = null;\n\n        /**\n         *\n         */\n        function createElement() {\n            self.$el = self.$el || $('<div>').addClass(viewClass);\n        }\n\n        /**\n         *\n         * @param page\n         * @param i\n         */\n        function addToPageList(page, i) {\n            if (isNaN(i) || i === null) {\n                self.paginator.pages.push(page);\n                return;\n            }\n\n            self.paginator.pages.splice(i, 0, page);\n        }\n\n        /**\n         *\n         * @returns {Number}\n         */\n        self.getPageCount = function getPageCount() {\n            return self.paginator.pages.length;\n        };\n\n        /**\n         *\n         * @param klass\n         * @returns {XMLList}\n         */\n        self.getBlocks = function getBlocks(klass) {\n            return self.$el\n                .find(toClassSelector(klass))\n                .children(toClassSelector(marginClass))\n                .children();\n        };\n\n        /**\n         *\n         * @param page\n         * @param i\n         * @returns {*}\n         */\n        self.addPage = function addPage(page, i) {\n            addToPageList(page, i);\n            page.mountTo(self.paginator);\n            return page;\n        };\n\n        /**\n         *\n         * @param parent\n         */\n        self.mountTo = function mountTo(parent) {\n            self.paginator = parent;\n            self.paginator.$el.append(self.$el);\n        };\n\n        createElement();\n    }\n\n    /**\n     * Class for the paginator.\n     * @param {object} opts The options of the paginator.\n     * @constructor\n     */\n    function Paginator(opts) {\n        var self = this,\n            modelObserver = new MutationObserver(commitMutations),\n            pub,\n            isObserving = false;\n\n        opts = new PaginatorOptions(opts);\n\n        /**\n         *\n         * @type {PaginatorModel}\n         */\n        self.model = new PaginatorModel(opts);\n\n        /**\n         *\n         * @type {PaginatorView}\n         */\n        self.view = new PaginatorView(opts);\n\n        /**\n         *\n         * @type {PaginatorRenderer}\n         */\n        self.renderer = new PaginatorRenderer(opts);\n\n        /**\n         *\n         * @type {Array}\n         */\n        self.pages = self.pages || [];\n\n        /**\n         *\n         */\n        function render() {\n            self.renderer.render();\n        }\n\n        function commitMutations() {\n            render();\n        }\n\n        /**\n         *\n         * @param $el\n         */\n        function bindToElement($el) {\n            if (!!self.$el) {\n                self.$el.removeClass(componentClass);\n            }\n            self.$el = $el;\n            if (self.$el.hasClass(componentClass)) {\n                return;\n            }\n            self.$el\n                .addClass(componentClass)\n                .removeClass(unpaginatedClass);\n        }\n\n        /**\n         *\n         */\n        function createModel() {\n            var $modelChildren;\n\n            self.model.mountTo(self);\n\n            $modelChildren = self\n                .$el\n                .findShallow(toClassSelector(headerClass + ' ' + contentClass + ' ' + footerClass));\n\n            self.model.$watch.append($modelChildren);\n        }\n\n        /**\n         *\n         */\n        function createView() {\n            self.view.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        function createRenderer() {\n            self.renderer.mountTo(self);\n        }\n\n        /**\n         *\n         */\n        self.detachObserver = function detachObserver() {\n            modelObserver.disconnect();\n        };\n\n        /**\n         *\n         */\n        self.observeModel = function observeModel() {\n            modelObserver\n                .observe(self.model.$watch[0], {\n                    childList: true,\n                    attributes: true,\n                    characterData: true,\n                    subtree: true\n                });\n            isObserving = true;\n        };\n\n        pub = {\n            observe: function doObserve() {\n                if (!isObserving) {\n                    return;\n                }\n                self.observeModel();\n            },\n            refresh: function doRender() {\n                render();\n            }\n        };\n\n        /**\n         *\n         * @param $el\n         */\n        self.bindTo = function bindTo($el) {\n            bindToElement($el);\n            createModel();\n            createView();\n            createRenderer();\n            self.observeModel();\n            $el.data('paginator', pub);\n            return pub;\n        };\n    }\n\n    $.fn.paginate = function paginate(opts) {\n        return new Paginator(opts).bindTo(this);\n    };\n})();\n"]}